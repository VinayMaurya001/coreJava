Final variables
Final instance variable
Final static variable
Final local variable
Final parameter


instance variable
If the value of a variable is varied from object to object, such type of variables are called instance variables.
For every object, a separate copy of instance variable will be created.
For instance variables, we are not required to perform initialization explicitly. 
JVM will always provide default values.

Final instance variable
If the instance variable declared as final then compulsory we have to perform initialization explicitly, 
whether we are using that variable or not. And JVM won’t provide default values.
class Test
{
final int x;
}
CTE, error: variable x not initialized in the default constructor.

For final instance variable, compulsory we should perform initialization before constructor completion. 
	At the time of declaration
	Inside instance block
	Inside constructor

At the time of declaration
Class Test
{
Final int x=10;
}

Inside instance block
Class Test
{
Final int x;
{
	X=10;
}
}

Inside constructor
Class Test
{
Final int x;
Test()
{
	X=10;
}
}
These are the only possible places to perform initialization for final instance variable. 
If we are trying to perform initialization, anywhere else then we will get CTE.
class Test
{
final int x;
public static void main(String args[])
{
	Test t=new Test();
	System.out.println(t.x=99);
}
}
CTE, error: cannot assign a value to final variable x


static variable
If the value of a variable is not varied from object to object, 
	such type of variables are not recommended to declare as instance variables. 
We should declare those variable at class level by using static modifier.
In the case of instance variable, for every object, a separate copy will be created 
    but in the case of static variable, a single copy will be created at class level and shared by every object of that class.
For static variable, it is not required to perform initialization explicitly, JVM will always provide default value.
class Test
{
static int x;
public static void main(String args[])
{
	System.out.println(x);//0
}
}

Final static variable
If static variable declared as final then compulsory we should perform initialization explicitly, 
otherwise we will get CTE and JVM won’t provide default value.
class Test
{
final static int x;
public static void main(String args[])
{
	System.out.println(x);
}
}
CTE, error: variable x not initialized in the default constructor


Rule: Before class loading completion, compulsory we should perform initialization before class loading completion.
That is, the following are various places form this:
	At the time of declaration
	Inside static block

At the time of declaration
Class Test
{
Final static int x=10;
}

Inside static block
Class Test
{
Final static int x;
static
{
	X=10;
}
}

These are the only possible places to perform initialization, for final static variable. 
If we are trying to perform initialization anywhere else, we will get CTE.
class Test
{
final static int x;
public static void main(String args[])
{
	x=10;
	System.out.println(x);
}
}
CTE, error: cannot assign a value to final variable x.


Local variables
Sometimes to meet the temporary requirement of the programmer, we have to declare variables inside 
    a method or inside constructor or inside block. 
	Such type of variables are called local variables( or temporary variables or stack variables or automatic variables).
For local variables JVM wonn’t provide any default values, compulsory we should perform initialization explicitly before using that local variable. 
	That is if we are not using then it is not required to perform initialization for local variable.

class Test
{
public static void main(String args[])
{
	int x;
	System.out.println("hello");
}
}
Output: Hello

class Test
{
public static void main(String args[])
{
	Int x;
	System.out.println(x);
}
}
Output: CTE, error: variable x might not have been initialized

Final local variables
Even though local variable is final, before using only , we have to perform initialization. 
	That is if we are not using then it is not required to perform initialization, even though it is final.
class Test
{
public static void main(String args[])
{
	final int x;
	System.out.println("hello");
}
}
Output:hello

class Test
{
public static void main(String args[])
{
	final int	x;
	System.out.println(x);
}
}
Output:CTE, error: variable x might not have been initialized



The only applicable modifier for local variable is final. 
By mistake, if we are trying to apply any other modifier, we will get CTE.
class Test
{
public static void main(String args[])
{
	public int x=10; //invalid
	private int x=10; //invalid
	protected int x=10; //invalid
	static int x=10; //invalid
	transient int x=10; //invalid
	volatile int x=10;//invalid
	int x;//valid
	final int x;//valid
}}
CTE, error: illegal start of expression


class Test
{
public static void main(String args[])
{
	public int x=10;
	SOP(x);
}
}	
Output:CTE

If we are not declaring any modifier then by default it is default but this rule is applicable only form instance and static variables 
	but not for local variables.


Formal parameters 
Formal parameters of a method simply acts as local variables of that method. 
Hence formal parameter can be declared as final.
If formal parameter declared as final then within the method we cann’t perform re-assignment.
class Test
{
public static void main(String args[])
{
	m1(10,20);
}
public static void m1(int x, int y)
{
	x=100;
	y=200;
	System.out.println(x+"  "+y);
}
}
Output:100 200

class Test
{
public static void main(String args[])
{
	m1(10,20);
}
public static void m1(final int x, int y)
{
	x=100;
	y=200;
	System.out.println(x+" "+y);
}
}
Output: CTE, error: final parameter x may not be assigned


String, StringBuffer , StringBuilder & all wrapper classes are final classes.
	