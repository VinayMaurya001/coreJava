Data Hiding
Outside person cann't access our internal data directly or our internal data should not go out directly, 
	this OOP feature is nothing but data hiding.

After validation or authentication, outside person can access our internal data.
Example 1: After providing proper user-name and password, we can able to access our gmail inbox information.
Example 2: Even though we are valid customer of bank, 
	we can able to access our account information and we cann't access others account information.

How we can achieve data hiding?
By declaring data member as private we can achieve data hiding.

Public class Account
{
Private double balance;
Public double getBalance()
{
//perform validation
Return balance;
}
}

Advantage of data hiding
	Security  ( swiss bank & black money)
	Recommended modifier to declare data member is private.



Abstraction
Wealth- 4 crore , some in form of land , some in form of cash, jewellery etc
Atm card using- ask customer care lady. server name, language used , 100 police will ansser

Hiding internal implementation and just highlight the set of service, what  we are offering is the concept of abstraction.
Showing essential details and hiding non-essential details is the concept of abstraction.
Example: Through Bank ATM GUI screen, bank people are highlighting the set of services, what they are offering, 
without highlighting internal implementation.

Advantage
	Complexity
	Security 
		because we are not highlighting our internal implementation
	Enhancement will become easy 
		Without affecting outside person, we can able to perform,
			any type of changes in our internal system & hence Enhancement will become easy.
	Improve easiness to our system
	Improve Maintainability of application

By using abstract classes and interfaces, we can implement abstraction.


Encapsulation
The process of binding/wrapping  data and corresponding methods into a single unit is called encapsulation.
Example:
Class Student
{
Data members
+
Behaviours(methods)
}
Encapsulation=Data hiding+Abstraction
If any component follows data hinding & abstraction, such type of component is said to be encapsulated component.
Public class Account
{
Private double balance;
Public double getBalance()
{
//perform validation
Return balance;
}
Public void setBalance(double balance)
{
//perform validation
This.balance=balance;
}}

Advantage
	Security 
	Enhancement will become easy 
	Improve easiness to our system
	Improve Maintainability of application
Disadvantage
It increases length of code and Slows down execution and so overall performance 
	( example a hall with 10 doors and with 1 door having metal detector)

Tightly encapsulated class
If and only if each and every variable is declared as private, 
	(we need not to check, whether class contains corresponding getter or 
setters or not and whether these methods are declared as public or not ).
	If the parent class is not tightly encapsulated then no child class is tightly encapsulated.
	class A{
	int x=10;
	}
class B extends A{private int y=20;}
class C extends B{ private int z=30;}

Advance OOPs features
	Coupling
	Cohesion

Coupling
The degree of dependency between the components is called coupling.

If dependency is very much between components then it is considered as tightly coupling & 
if dependency is less then it is considered as loosly coupling. 
Tightly coupling is worst case programming practice. 

class A{static int i=B.j;}
class B{static int j=C.k;} 
class C{Static int k=D.m1();}
class D{public static int m1(){return 10;}
}
The above components are said to be tightly coupled with each other because dependency b/w the component is more. 

Tightly coupling is not a good programming practice. 
Because it has several serious disadvantages:
	Without affecting remaining components, we cannâ€™t modify any component & hence inhancement will become difficult.
	It supresses re-usability
	It reduces the maintainability of the application.
Hence we have to maintain dependency b/w the component as less as possible. 
	That is loosely coupling is a good programming practice.


Cohesion
If for every component a clear well defined functionality is defined then that component is said to be follow high cohesion.
Best example of high cohesion is MVC.

High cohesion is always a good programming practice because it has several advantages.
	Without affecting remaining components, we can modify any component & hence enhancement will become easy.
	It promotes re-usability of the code (where-ever validation is required, 
		we can reuse the same Validate servlet without re-writing).
	It improves the maintainability of the application.

Loosely coupling and high cohesion are good programming practice.


Message passing USING OBJECT
Inheritance
Polymorphism
