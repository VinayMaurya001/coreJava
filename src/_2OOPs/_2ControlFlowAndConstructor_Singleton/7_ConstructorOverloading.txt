Overloaded Constructor
1:Within a class we can declare multiple constructors & all these constructors having same name 
	but different parameter list, 
	hence all these constructors are considered as overloaded constructors. 
	Hence overloading concept applicable for constructors.
	
class Test{
	Test(){
		this(10);
		System.out.println("no-arg");
	}
	Test(int i){
		this(10.5);
		System.out.println("int-arg");
	}
	Test(double d){
		System.out.println("double-arg");
	}
	public static void main(String[] args){
		Test t1 = new Test();
		Test t2 = new Test(10);
		Test t3 = new Test(10.5);
		Test t4 = new Test(10l);
	}
}


class Person{
	Person(String name){
		this.name = name;
	}
	Person(String name, int age){
		this.name = name;
		this.age = age;
	}
	public static void main(String[] args){
		Person p1 = new Person("Durga");
		Person p1 = new Person("Ravi", 30);
		Person p1 = new Person("Siva", 40);
	}
}


2:Whatever non-private  methods are present in parent class, by default, it is available in child class. 
	Hence inheritance concept is applicable for methods. 
Inheritance and overriding concepts are not applicable for constructor.
But overloading concept is applicable for constructor.

3: Every class in Java including abstract class can contain constructors 
	but interface cann't contain constructor (interface doesn't have instance members to initialize).
class TEst{
	Test(){//valid
	}
}

abstract class TEst{
	Test(){//valid
	}
}

interface Test{
	Test(){//Invalid
	}
}

Case 1:
Petrol tank and matches are side by side but fire is not going to happen until we scratch matches.
class Test{
public static void m1(){
m2();
}
public static void m2(){
m1();
}
public static void main(String[] args){
System.out.println("Hello");
}
} 
Recursive method call is a RTE saying StackOverflowError. 
class Test{
public static void m1(){
m2();
}
public static void m2(){
m1();
}
public static void main(String[] args){
m1();
System.out.println("Hello");
}
}

Possibility of recursive constructor invocation is CTE.
class Test{
Test(){
this(10);
}
Test(int i){
this();
}
public static void main(String[] args){
System.out.println("Hello");
}
}


Case 2:
If parent class contains any arg-constructor then while writing child class, 
	we have to take special care w.r.t. constructor.
Whenever we are writing any arg constructor, it is highly recommended to write no arg constructor also.
class P{
}
class C extends P{
}

class P{
	P(){
	}
}
class C extends P{
}

class P{
	P(int i){//Invalid
	}
}
class C extends P{
}


Constructor chaining

Case 3:
class P
{	
	P()throws java.io.IOException	{		}
}
public class Test extends P
{	
	public static void main(String args[])
	{	
		System.out.println("Hello");	
	}
}
Output:CTE,
unreported exception IOException in default constructor


Case 4:
class P
{
	P()throws java.io.IOException
	{
	}
	}
public class Test extends P
{
	Test()
	{
		/*	try-catch approach here would not work, because super() must be 1st line inside constructor*/
		try
		{
			super();//CTE, call to super must be first statement in constructor
		}
		catch(IOException e)
		{		
		}
	}
	public static void main(String args[])
	{
		System.out.println("Hello");
	}
}

Case 5:
If parent class constructor throws any checked exception, 
compulsory child class constructor should throw the same checked exception or its parent.
class P
{
	P()throws java.io.IOException	{	}
}
public class Test extends P
{
	Test()throws java.io.IOException,Exception,Throwable
	{
		//optional super();
	}
	public static void main(String args[])	{		System.out.println("Hello");	}
}
Output:
Hello




Which of the following is the valid?
	The main purpose of constructor is to create an object. //invalid
	The main purpose of constructor is to perform initialization of an object but not to create object. //valid

	The name of the constructor need not to be same as class name.//invalid
	Return type concept is applicable for constructor but only void.//invalid
	We can apply any modifier for constructor.//invalid
	Default constructor generated by JVM.//invalid
	Compiler is responsible to generate default constructor.//valid
	Compiler will always generate default constructor.//invalid
	If we are not writing no-arg constructor then compiler will generate default constructor.//invalid
	Every no-arg constructor is always default constructor.//invalid
	Default constructor is always no-arg constructor.//valid
	The first line inside every constructor should be either super() or this(); 
		If we are not writing anything then compiler will generate this()//invalid
	For constructor, both overloading and overriding concept is applicable.//invalid
	For constructor, inheritance concept is applicable but not overriding.//invalid
	Only concrete classes can contain constructor but abstract class cann’t.//invalid
	Interface can contain constructors.//invalid
	Recursive constructor invocation is a runtime exception.//invalid
	If parent class constructor throws some checked exception then compulsory child class constructor should throw 
		the same checked exception or its child.//invalid
	Once constructor completes then only object creation completes.//invalid
	First object will be created then constructor will be executed.//valid
	The purpose of new keyword is to create object and the purpose of constructor is to initialize that object.//valid
	We can't create object for abstract class directly but indirectly we can create.//invalid
	Whenever we are creating child class object, automatically parent class object will be created internally.//invalid
	Whenever we are creating child class object automatically abstract class constructor will be executed.//valid
	Whenever we are creating child class object automatically parent class object will be created.//invalid
	Whenever we are creating child class object automatically parent class constructor will be executed 
		but parent class object won't be created.//valid
	Either directly or indirectly we can't create object for abstract class 
		hence constructor concept is not applicable for abstract class.//invalid



KEY Points about  Constructor
1)Special method like construct
2) Objective -> Used to initialize object( specially data member) but not to create object
3)Name of the class and name of the constructor must be same
4)return type concept is not applicable for constructor not even void.
	By mistake if we are trying to declare, return type for the constructor, then we wonn’t get any CTE, because compiler treats it as a method. 
	Hence it is legal (but not recommended) to have a method, whose name is exactly same as class name.
5)The only  applicable modifier for constructors are public, private, protected, <default>.
6)Strictly speaking, Not called explicitly, implicitly called
	That is we can call a constructor directly  from another constructor only.
7)Provide Ways to initialize object
8)Type 
Default Constructor-Provide by compiler
	Zero Arg
User defined COnstructor
	Zero arg
	Parameterized Constructor
9)The first line inside every constructor should be either super() or this();
	If we are not defining anything, compiler will always place super();
	We can take super() or this(), only in first line of constructor. 
		If we are trying to take anywhere else we will get CTE.
	That is we can call a constructor directly  from another constructor only.
	We can use super and this everywhere except static area.
10)Overloaded Constructor
	Inheritance and overriding concepts are not applicable for constructor.
	But overloading concept is applicable for constructor.
11)Every class in Java including abstract class can contain constructors 
	but interface cann’t contain constructor (interface does’t have instance members to initialize).
12)If parent class contains any arg-constructor then while writing child class, we have to take special care w.r.t. constructor.
	Whenever we are writing any arg-constructor, it is highly recommended to write no arg constructor also.
13)Constructor Chaining
14)If parent class constructor throws any checked exception, 
	compulsory child class constructor should throw the same checked exception or its parent.
	Otherwise CTE,unreported exception IOException in default constructor.