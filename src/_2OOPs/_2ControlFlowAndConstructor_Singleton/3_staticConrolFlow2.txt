native method
1)
class Box{
	private static  void m1();//CTE
}
Output:CTE
error: missing method body, or declare abstract
	private static  void m1();

2)
class Box
{
	private static native void m1();//RE, main method not found
}



Static block
Static block executes at the time of class-loading. 
Hence If we want to perform any activity, at the time of class-loading, 
	then we have to define that inside a static block.

Example 1
At the time of java class loading, the corresponding native library should be loaded, 
hence we have to define this activity, inside static block.
class Box{
static{
	System.loadLibrary("native library path");
}}
Example 2
After loading every database driver class, we have to  register, 
the driver class with driver manager but inside database driver class there is a static block to perform this activity and 
we are not responsible to register explicitly.
Class DBDriver{
	Static{
		Register this driver with driver manager
	}
}

Within a class we can declare any no of block, but all these static block will be executed from top to bottom.	
Without writing main method , is it possible to print some statement to the console?
	Yes, by using,static block before java version 1.7.
	Since Java version 1.7, main() method is mandatory to start a program execution.
	Since Java version 1.7, without writing main() method, it is impossible to print some statement to the console?
class Box{
	static{
		System.out.println("I can print...");
		System.exit(0);
	}
}
Without writing main method &  static block , is it possible to print some statement to the console?
	Yes, it is possible.
class Box{
	static int x=m1();
	public static int m1(){
		System.out.println("I can print...");
		System.exit(0);
		return 10;
	}
}

Class Test{
	static Test t=new Test();{
		System.out.println("I can print...");
		System.exit(0);
	}
}

Class Test{
	static Test t=new Test();
	Test(){
		System.out.println("I can print...");
		System.exit(0);
	}
}

Static control flow in parent to child relationship
	Identification of static members from parent to child
	Execution of static variable assignments and static block from parent to child.
	Execution of only child class main() method 

class Box{
	static int i=10;//12
	static{
		m1();//13
		System.out.println("First static block");//15
	}
	public static void main(String[] args ){
		m1();
		System.out.println("main() method");
	}
	public static void m1(){
		System.out.println(j);//14
	}
	static int j=20;//16
}

class Test extends Box{
	static int x=100;//17
	static{
		m1();//18
		System.out.println("Second static block");//20
	}
	public static void main(String[] args ){
		m1();//23
		System.out.println("derived main()");//25
	}
	public static void m1(){
		System.out.println(y);//19,24
	}
	static{
		System.out.println("Derived second static block");//21
	}
	static int y=20;//22
}
 
Output:
C:\Users\Java\Documents>javac Box.java

C:\Users\Java\Documents>java Test
0
First static block
0
Second static block
Derived second static block
20
derived main()

C:\Users\Java\Documents>javac Box.java
C:\Users\Java\Documents>java Box
0
First static block
20
main() method


Whenever we are executing child class , then main() method of child class will be executed.
But if child method does not have main() method then parent class main() method will be executed.

Whenever we are loading child class, automatically parent class will be loaded but 
Whenever we are loading parent class, child class will not be loaded. 
Because parent class members, by default available to the child class. 
 Where as child class member, by default wonn't available to the parent.
