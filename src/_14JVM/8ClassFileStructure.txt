Class file structure

class File{
	magic_number;
	minor_version;
	major_version;
	constant_pool_count;
	constant_pool[];
	access_flags;
	this_class;
	super_class;
	interface_count;
	interface[];
	fields_count;
	fields[];
	methods_count;
	methods[];
	attributes_count;
	attributes[];
}


Magic Number
The first four bytes of class file is magic number. This is a predefined value, used by JVM to identify ,
	.class file is generated by valid compiler. The value should be 0xCAFEBABE.
Whenever we are executing a java class, if JVM unable to find magic number , 
	then we will get RTE saying java.lang.ClassFormatError: incompatible magic value.

Minor Version & Major Version
Major & minor versions represents .class file version.
JVM will use these  versions to identify , which version of compiler generates , current .class file.

javac 1.6v --> Java 1.7v//valid
javac 1.7v --> Java 1.6v//invalid

M.m
where M = Major version
      m = Minor version
1.5v - 49.0
1.6v - 50.0
1.7v - 51.0


Note: Lower version compiler generated .class file can be run by higher version JVM 
	but higher version compiler generated .class file cann’t be run lower version JVMs.
If we are trying to run, we will get RTE, saying UnsupportedClassVersionError


Constant_pool_count
It represents number of constant presents in constant pool.
Constant pool array
It represents information about constant present in constant pool.

Access Flags
It provides information about modifiers which are declared to the class.

This_class
It represents fully qualified name of the class.

Super_class
It represents fully qualified name of the immediate super class of current class.


Example:
	Test.class
		this_class: Test
		super_class: Object

Interface_count
	It returns number of interfaces implemented by current class.
	Interface array
	It represents interfaces information implemented by current class

Fields_count
	It represents number of fields(static variable) presents in the current class
Fields array
	It represents fields information present in current class.

Method count
	It represents number of methods present in current class.
Methods array
	It provides information about all methods present in current class

Attribute count
	It returns number of attribute presents in current class.
Attribute array
	It provides information about all attribute present in current class.


Java –verbose Test.class

