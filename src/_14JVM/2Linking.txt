Linking
	Verifying
	Preparing
	Resolving

Verifying
It is the process of ensuring the binary representation of a class is structurally currect or not. 
That is JVM will check whether .class is generated by the valid compiler or not. 
That is whether .class file is properly formatted or not.
Internally byte-code verifier is responsible for this activity.
Byte-code verifier is the part of class-loader subsystem.
If verification fails then we will get runtime exception saying java.lang.VerifyError.

Preparing
In this phase, JVM allocates memory for class level static variables and assign default values.
Note:
In initialization phase originally value will be assign to the static variables. 
	And here in preparing phase, only default values will be assign.

Resolving
In this phase, 
It is the process of replacing symbolic names in our program with original memory references from method area.

class Test{
	public static void main(String[] args){
		String s = new String("durga");//memory level references or method area
		Student s1 = new Student();
	}
}

Whenever load child class, automatically parent class also will be loaded.

For the above class, classloader loads
⦁	Test.class
⦁	Object.class
⦁	String class
⦁	Student class

The names of these classes are stored in constant pool of test class.
In resolution phase, these names are replaced with original memory level references for method area.

Initialization
In this phase, all static variables are assigned with original values & static block will be executed from parent to child and from top to bottom.

Loading 	--> 	Linking 	-->		Initializing
				  [Verifying]
				  [Preparing]
				  [Resolving]		

While loading, linking and initialization, if any error occurs, then we will get runtime-exception, saying java.lang,LinkageError.
