Cloning
The process of creating exactly duplicate object is called cloning.

Exact Xerox copy	
In 1990: miracle : 100 SRK, 100Madhuri
But later, disadvantage more than advantage like Modi replaced by our cloned Modi
Like in Don movie

Cloning on Human being is banned.
But cloning on Java object is legal.

Purpose of cloning
1)To maintain backup copy
	Driving license original copy at home.
2)To preserve state of an object
	 (suppose we want to compare our object later with updated object)


clone() method
	protected  native Object clone() throws CloneNotSupportedException
	If you want to use Java Object clone() method, you have to implement the java.lang.Cloneable marker interface. 
	Otherwise, it will throw CloneNotSupportedException at runtime. 
	Also Object clone is a protected method, so you will have to override it. 
	We are good with java object default cloning as long as we have only primitive and immutable variables in the object.
	We can perform  shallow cloning by clone() method of Object class.


Object Cloning Types
1. Shallow Cloning
		 @Override
		 public Object clone() throws CloneNotSupportedException {
			 Employee e = new Employee();
			 e.setId(this.id);
			 e.setName(this.name);
			 e.setMap(this.map);
			 return e;
		}
2. Deep Cloning
	The clone() method should return a new object totally detached from the original instance. 
	So if you are thinking to use Object clone and cloning in your program, do it wisely and override it properly by taking care of mutable fields.
	It could be a daunting task if your class extends other class that in turn extends other class and so on. 
	You will have to go all the way in the Object inheritance hierarchy to take care of the deep copy of all the mutable fields.

		public Object clone() throws CloneNotSupportedException {
		
			Object obj = super.clone(); //utilize clone Object method
		
			Employee emp = (Employee) obj;
		
			// deep cloning for immutable fields
			emp.setProps(null);
			Map<String, String> hm = new HashMap<>();
			String key;
			Iterator<String> it = this.props.keySet().iterator();
			// Deep Copy of field by field
			while (it.hasNext()) {
				key = it.next();
				hm.put(key, this.props.get(key));
			}
			emp.setProps(hm);
			
			return emp;
		}


Cloning using Serialization?
		One way to easily perform deep cloning is through serialization. 
		But serialization is an expensive procedure and your class should implement Serializable interface. 
		All the fields and superclasses must implement Serializable too.

		Using Apache Commons Util
			If you are already using Apache Commons Util classes in your project and your class is serializable, then use the below method.
			Employee clonedEmp = org.apache.commons.lang3.SerializationUtils.clone(emp);

		Copy Constructor for Cloning
			We can define a copy constructor to create a copy of the object. 
			Why to depend on the Object clone() method at all? 
			For example, we can have an Employee copy constructor like the following code.
				public Employee(Employee emp) {
					this.setId(emp.getId());
					this.setName(emp.getName());
					
					Map<String, String> hm = new HashMap<>();
					String key;
					Iterator<String> it = emp.getProps().keySet().iterator();
					// Deep Copy of field by field
					while (it.hasNext()) {
						key = it.next();
						hm.put(key, emp.getProps().get(key));
					}
					this.setProps(hm);
				
				}
			Whenever we need a copy of employee object, we can get it using Employee clonedEmp = new Employee(emp);. 
			However writing copy constructor can be a tedious job if your class has a lot of variables, especially primitive and immutable.


Java Object Cloning Best Practices
	Use default Object clone() method only when your class has primitives and immutable variables or you want shallow copy. 
		In case of inheritance, you will have to check all the classes you are extending till the Object level.
	You can also define copy constructor if your class has mostly mutable properties.
	Utilize Object clone() method by calling super.clone() in overridden clone method, 
		then make necessary changes for deep copying of mutable fields.
	If your class is serializable, you can use serialization for cloning. 
		However, it will come with a performance hit, so do some benchmarking before using serialization for cloning.
	If you are extending a class and it has defined clone method properly using deep copy, 
		then you can utilize default clone method. For example, we have properly defined clone() method in Employee class as follows.





Creating duplicate reference variable is not cloning.

Test t2=t1;

class  Test implements Cloneable
{
	int  i=10;
	int j=20;
	public  static void main(String[] args) throws CloneNotSupportedException
	{
		Test t1=new Test();
		Test t2=(Test)t1.clone();
		t2.i=888;
		t2.j=999;
		SOP(t1.i+ “ ”+t1.j);         
	}
}

If we not here implements Cloneable interface then we will not get any CTE but RTE, saying CloneNotSupportedException.
We can perform cloning only for cloneable object. 
	An object is said to be cloneable if and only if the corresponding class implements Cloneable interface.
Cloneable interface present in java.lang package. 
	Cloneable interface does not contain any method. It is a marker interface.

Type of cloning
	Shallow Cloning(bitwise copy) 
	Deep Cloning
		
Shallow Cloning
The process of creating bitwise copy of an object is called Shallow Cloning. 
	If the main object contain primitive variables then exactly duplicate copy will be created in the cloned object.
	If the main object contain any reference variables then corresponding object won’t be created, 
		just duplicate reference variable will be created pointing to old contained object.

Object class clone() method meant for shallow cloning.

public class ShallowCloning {
	public static void main(String[] args) throws CloneNotSupportedException {
		Cat c = new Cat(20);
		Dog d1 = new Dog(c, 10);
		System.out.print(d1.i+"\t");
		System.out.println(d1.c.j);
		
		Dog d2 = (Dog)d1.clone();
		System.out.print(d2.i+"\t");
		System.out.println(d2.c.j);
		
		d2.i=888;
		d2.c.j=999;
		System.out.print(d2.i+"\t");
		System.out.println(d2.c.j);
		
		System.out.print(d1.i+"\t");
		System.out.println(d1.c.j);
	}
}
class Cat
{
	int j;
	Cat(int j) {
		this.j = j;
	}
}
class Dog implements Cloneable {
	Cat c;
	int i;
	public Dog(Cat c, int i) {
		super();
		this.c = c;
		this.i = i;
	}
	@Override
	public Object clone()throws  CloneNotSupportedException
	{
		//return super.clone();
		Dog d = new Dog(c, i);		
		return d;
	}
}

In shallow cloning, by using cloned object reference if we perform any change to the contained object 
	then those changes will be reflected to the main object. 
To overcome this problem we should go for deep cloning.

Deep Cloning
The process of creating exactly duplicate independent copy including contained object is called Deep Cloning. 
	In deep cloning, if the main object contain any primitive variables then in the cloned object exactly duplicate copy will be created.
	If the main object contain any reference variables then corresponding contained object also will be created in the cloned copy. 
By default, Object class clone() method meant for shallow cloning. 
	But we can implement deep cloning explicitly by overriding clone() method in our class.


public class DeepCloning {
	public static void main(String[] args) throws CloneNotSupportedException {
		Cat c = new Cat(20);
		Dog d1 = new Dog(c, 10);
		System.out.print(d1.i+"\t");//10
		System.out.println(d1.c.j);//20
		
		Dog d2 = (Dog)d1.clone();
		System.out.print(d2.i+"\t");//10
		System.out.println(d2.c.j);//20
		
		d2.i=888;
		d2.c.j=999;
		System.out.print(d2.i+"\t");//888
		System.out.println(d2.c.j);//999
		
		System.out.print(d1.i+"\t");//10
		System.out.println(d1.c.j);//20
	}
}
class Cat
{
	int j;
	Cat(int j) {
		this.j = j;
	}
}
class Dog implements Cloneable {
	Cat c;
	int i;
	public Dog(Cat c, int i) {
		super();
		this.c = c;
		this.i = i;
	}
	@Override
	public Object clone()throws  CloneNotSupportedException
	{
		Cat c1 = new Cat(this.c.j);
		Dog d = new Dog(c1, i);		
		return d;
	}
}
By using cloned object reference if we perform any change to the contained object 
	then those changes won’t be reflected to the main object. 


Which cloning is best?
If object contains only primitive variables then shallow cloning is the best choice.
If object contains reference variables then deep cloning is the best choice.

Normally shallow cloning we perform.




Immutable class
https://www.journaldev.com/129/how-to-create-immutable-class-in-java
https://www.journaldev.com/1425/builder-design-pattern-in-java
https://www.journaldev.com/1432/java-immutable-class-builder
https://www.journaldev.com/802/string-immutable-final-java


Cloning
https://www.journaldev.com/60/java-clone-object-cloning-java
https://www.journaldev.com/21078/copy-constructor-in-java
https://www.journaldev.com/17129/java-deep-copy-object
https://www.journaldev.com/753/java-copy-array-array-copy-java