Thread class constructors
	Thread t=new Thread();
	
	Thread t=new Thread(Runnable r);
	Thread t=new Thread(String name);
	Thread t=new Thread(Runnable r, String name);

	Thread t=new Thread(ThreadGroup tg, Runnable r);
	Thread t=new Thread(ThreadGroup tg, String name);
	Thread t=new Thread(ThreadGroup tg, Runnable r, String name);
	
	Thread t=new Thread(ThreadGroup tg, Runnable r, String name, long stackSize);

Methods of Thread Class
The Thread class defines a number of methods useful for thread management. 
These include static methods, which provide information about, or affect the status of, the thread invoking the method.
The other methods are invoked from other threads involved in managing the thread and Thread object. 
We'll examine some of these methods in the following sections.
	Getting and setting name of a thread
	Getting and setting Priority of a thread



Getting and setting name of a thread
Every thread in Java has a some name. It may be default name generated by JVM or customized name provided by programmer.
Every thread has a name for identification purposes. More than one thread may have the same name. 
If a name is not specified when a thread is created, a new name is generated for it.

Public final String getName();
Public final void setName();
Thread.currentThread()- returns current executing thread

class Test
{
	public static void main(String args[])throws Exception
	{
		System.out.println(Thread.currentThread().getName());//main
		Thread.currentThread().setName("Vinay");
		System.out.println(Thread.currentThread().getName());//Vinay

		MyThread t=new MyThread();
		System.out.println(t.getName());//Thread-0
		t.setName("child thread");
		System.out.println(t.getName());//child thread

		//System.out.println(10/0);

		t.start();
	}
}
class MyThread extends Thread
{
	public void run()
	{
		System.out.println("\n"+Thread.currentThread().getName());
		Thread.currentThread().setName("inside child thread");
		System.out.println(Thread.currentThread().getName());
	}
}
Output:
main
Vinay
Thread-0
child thread

child thread
inside child thread



Thread priorities
	Every thread in Java has some priority. It may be 
		default, generated by JVM(equal to priority of parent thread) 
		customized priority explicitly provided by programmer.
	Valid range-1 to 10
		Thread.MIN_PRIORITY -1
		Thread.MAX_PRIORITY -10
		Thread.NORM_PRIORITY -5
	Two friends talks about his son. 2550(SAD) rank AND 148000(HAPPY)

Thread scheduler use priority while allocating processor.
The thread which is having highest priority, will get chance first. 
But Some platform (like window )does not provide support for thread priority.
If two threads having same priority then we cann’t accept exact execution  order, It depends on thread scheduler.


Public final int getPriority();
Public final void setPriority(int P);//valid range:1-10

t.setPrioroty(3);// valid
t.setPrioroty(Thread.MIN_PRIORITY);// valid
t.setPrioroty(22);// RE, saying IlligalArgumentException

Default Priority
	For main thread is 5. And 
	For remaining threads, 
		default priority will be inherited from parent thread to child thread, 
		That is, whatever priority parent thread has, the same priority will be there for the child thread.

class Test
{
	public static void main(String args[])throws Exception
	{
		System.out.println("\n"+Thread.currentThread().getPriority());
		Thread.currentThread().setPriority(10);
		System.out.println(Thread.currentThread().getPriority());

		MyThread t=new MyThread();
		System.out.println(t.getPriority());//
		t.setPriority(6);
		System.out.println(t.getPriority());//

		t.start();
	}
}
classMyThread extends Thread
{
	public void run()
	{
		System.out.println("\n"+Thread.currentThread().getPriority());
		Thread.currentThread().setPriority(8);
		System.out.println(Thread.currentThread().getPriority());
	}
}
Output:
5
10
10
6

6
8

