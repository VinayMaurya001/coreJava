Daemon threads
	The thread which is executing in the background.

Example:
Garbage collector
Attach Listener
Signal Dispatcher
.
.
.

Heroine- without makeup-makeup artist

1st required person in background for a movie
Producer
Director
.
.
.
. 



The main objective of daemon thread is to provide support for non-daemon threads(like main-thread).
For example, if main thread runs with low memory then JVM runs garbage collector to destroy useless objects 
	so that number of bytes of free memory will be increased. With this free memory, main thread can continue its execution.

Garbage collector thread priority-1
Main-thread priority-5
Usually daemon threads having low priority but based on requirement, daemon threads can run with high priority also.
 

public boolean isDaemon()
We can check daemon neture of a thread by using isDaemon() method of thread class.

public void setDaemon(boolean b)
We can change daemon nature of a thread by using setDaemon() method.
But changing daemon nature is possible before starting of a thread only. 
After starting a thread, if we are trying to change daemon nature then we will get RE, saying IllegalThreadStateExeception.

Default nature of a thread
By default main-thread is always non-daemon.
And for all remaining threads, daemon nature will be inherited from parent to child. 
That is, if the parent thread is daemon then automatically child thread is also daemon and 
if parent thread is non-daemon then automatically child thread is also non-daemon.

Each thread may or may not also be marked as a daemon. 
When code running in some thread creates a new Thread object, 
the new thread has its priority initially set equal to the priority of the creating thread, 
and is a daemon thread if and only if the creating thread is a daemon.

Is it possible to change the nature of main-thread?
No, it is impossible to change the daemon nature of main thread because it is already started by JVM at beginning.


class Test
{
	public static void main(String [] args)
	{   
		System.out.println(Thread.currentThread().isDaemon());//false
	   Thread.currentThread().setDaemon(true);//RE, IllegalThreadStateException
}}
Output:
false
Exception in thread "main" java.lang.IllegalThreadStateException
        at java.lang.Thread.setDaemon(Thread.java:1352)
        at Test.main(Test.java:7)





Class MyThread extends Thread
{}
class Test
{
	public static void main(String [] args)
	{
	   System.out.println(Thread.currentThread().isDaemon());//false
	   //Thread.currentThread().setDaemon(true);//RE, IllegalThreadStateException

		MyThread t=new MyThread();
		System.out.println(t.isDaemon());//false
		t.setDaemon(false);
		System.out.println(t.isDaemon());//false
		t.setDaemon(true);
		System.out.println(t.isDaemon());//true
}
}
Output:
false
false
false
true



Whenever last non-daemon thread terminates, automatically all daemon thread will be terminated irrespective of their position.
class Test
{	public static void main(String [] args)
	{
		MyThread t=new MyThread();
		//t.setDaemon(true);//line 1
		t.start();
		System.out.println("End of main thread");
}}
class MyThread extends Thread
{	public void run()
	{	for(int i=0;i<10;i++)
		{
			System.out.println("Child Thread");
			try
			{
				Thread.sleep(2000);
			}
			catch(InterruptedException e)	{}
		}	}}
If we are commenting line 1 then both main thread & child thread are non-daemon & 
hence both threads will be executed until their completion. In this case output will be:
End of main thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread

If we are not commenting line 1 then main thread is non-daemon as usual  and child thread is daemon, 
hence whenever main thread terminates, automatically child thread will be terminated. In this case output will be:
End of main thread
Child Thread
Or 
End of main thread
	Or
Child Thread
End of main thread
