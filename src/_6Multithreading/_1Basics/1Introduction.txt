Multitasking
	Executing multiple task simultaneously is the concept of multitasking.
	Example- Classroom Student
		Listening the class
		Taking Running notes
		Checking mobile phones
		Sleeping
		Observing environment-Cute lady comes, head turns minmum 60 degree

Types/Categories of Multitasking
In concurrent programming, there are two basic units of execution: 
	processes and threads. 
In the Java programming language, concurrent programming is mostly concerned with threads. 
	However, processes are also important.
A computer system normally has many active processes and threads. 
	This is true even in systems that only have a single execution core, 
	and thus only have one thread actually executing at any given moment. 
	Processing time for a single core is shared among processes and threads through an OS feature called time slicing.

	
A process has a self-contained execution environment. 
	A process generally has a complete, private set of basic run-time resources; in particular, each process has its own memory space.
	Processes are often seen as synonymous with programs or applications. 
	However, what the user sees as a single application may in fact be a set of cooperating processes. 
	To facilitate communication between processes, most operating systems support Inter Process Communication (IPC) resources, 
	such as pipes and sockets. IPC is used not just for communication between processes on the same system, but processes on different systems.

Most implementations of the Java virtual machine run as a single process. 
	A Java application can create additional processes using a ProcessBuilder object. 
	Multiprocess applications are beyond the scope of this lesson.


Process based
	Executing several task simultaneously, where each task is separate independent program(process).
	Example-
	
		Typing a Java program in editor
		Listening audio songs from the same system
		Download a file from the internet
	Best suitable at OS level.
	Context Switching is very costly/difficult.
	Separate address spaces.
	Heavy Weight

Thread based
Executing several task simultaneously, where each task is separate independent part of the same program. 
And each independent part is called thread.
Example:
	Best suitable at programmatic level.
	Share Address spaces.
	Context Switching is very cheap/easy.
	Light Weight

		
Threads are sometimes called lightweight processes. 
Both processes and threads provide an execution environment, 
but creating a new thread requires fewer resources than creating a new process.

Threads exist within a process — every process has at least one thread. 
Threads share the process's resources, including memory and open files. 
This makes for efficient, but potentially problematic, communication.


Objective of Multitasking
	To reduce ideal time of processor
	To reduce response time of the system
	To increase performance of system 


Multi-threaded execution is an essential feature of the Java platform. 
Every application has at least one thread or several,if you count "system" threads that do things like memory management and signal handling. 
But from the application programmer's point of view, you start with just one thread, called the main thread. 
This thread has the ability to create additional threads.

Example:
The main important application areas of multithreading are:
	To develop multi-media graphics
	To develop animations
		Dancing in rain & flying birds
	To develop video games
	To develop web servers & application servers(Tomcat provide support simultaneously for 60 threads by default)

A program to search SCJP in computer HardDisk memory.

Wherever independent task are there, we use multitasking.
In Java , developing multi-threaded applications is very easy , in comparison to old languages. 
	Because Java provides in-built support for multithreading by having rich API. 

In Java, most of the work (90%) is done by the API only. (Thread, Runnable, ThreadGroup etc.)
