Inter Thread Communication
It means communication b/w two threads

I got a call at 6pm eve from my dear.  She told tomorrow morning u will get a letter.
May be it will be proposal. 
So I gone to check immediately due to just confirmation.

8:00 pm â€“ slept
8:15 pm- wake up and check check box
8:45 pm â€“
9:30
10:45:
11:20
12:15am
2:30am
4:00am
9:am
2:pm
Is there any perfume.
Today I m leaving for my native place. Till return donnt call or msg me.
Now my personal feeling was at that time to give left nd right to my dear lady.

I could keep a sticker on post box that whenever update please notify me. And in that way I can sleep piecefully.

T1:Abhi
T2:Postman

Unnessasry  system time not wasted.

T1â†’T1.wait()â†’waiting state
T2â†’notify()



1)
Two threads can communicate with each other by using 
wait()
notify()
notifyAll() 
methods of Object class.

The thread which is expecting updation, is responsible to call wait() method 
	then immediately the thread will entered into waiting state.

The thread which is responsible to perform updation, after performing updation, 
it is responsible to call  notify() method, then waiting thread will get that notification 
& continue its execution with those updated items.

2)
Wait(), notify() & notifyAll() methods are applicable only in multithreading. But still it is present in Object class?
If it is present in Object class , automatically it will present in Thread class. This is the wrong reason.

student.m1();
customer.m1();

If a method can be called on any object then that method should be in that corresponding class.
Same as wait()  method can be called on any object. Or wait() method is present in Object class because it can be called on any object.

Wait(), notify(), notifyAll() methods present in Object class but not in thread class 
becsause thread can call these method on any Java object.


3)
To  call a wait(), notify() , notifyAll() methods on any object, thread should be owner of that object.
That is thread should has lock of that object. 
That is, thread should be inside synchronized area . 
Hence we can call, wait(), notify() , notifyAll() only from synchronixed area, 
otherwise we will get RE, saying IllegalMonitirStateException.

4)
If a thread calls wait() method on any object, 
it immediately release the lock of that particular object(not all locks )& then entered into waiting state.

5)
Old postman_- uniform, bicycle, 
New postman-no uniform, splender bike, work reduced(now phone, whtsup)
Now only official purpose not normal purpose
Gov recognize that postman has very less work and so they entered in packers & movers domain

Old days: 
Postman in front of house
Check letter â€“pack letter, throw into house, shout â€œpostâ€�
Update, notify

Intelligent postman: shout â€œpostâ€�, pack letter, give letter
Notification, update

Synchronized code can be excuted with lock only.
If thread calls notify() method on any object, it releases the lock of that object but may not immediately. 



6)
Except wait(), notify() & notifyAll() ,there is no other method where thread releases the lock.
Method     Is thread releases the lock
Yield()		No
Join()		No
Sleep()		No
Wait()		Yes
Notify()	Yes
notifyAll()	Yes

1)
Which of the following is valid?
If a thread calls wait() method, immediately it will entered into waiting state, without releasing any lock.//invalid
If a thread calls wait() method, it releases the lock of that object but may not immediately.//invalid
If a thread calls wait() method on any object, it releases all locks acquired by that thread & immediately entered into waiting state.//invalid
If a thread calls wait() method on any object, it immediately releases the lock of that particular object & entered into waiting state.//Valid

If a thread calls notify() method on any object, it immediately releases, the lock of that particular object.//invalid
If a thread calls notify() method on any object, it releases  the lock of that particular object but may not immediately//valid

3)
Prototype of some methods 
public final 		void  wait() throws InterruptedException
public final native void  wait(long ms) throws InterruptedException
public final		void  wait(long ms,int ns) throws InterruptedException

public final native void  notify()
public final native void  notifyAll()

4)
Every wait() method throws InterruptedException, which is checked exception. 
Hence whenever we are using wait() method, compulsory we should handle this InterruptedException, either by try-catch or by throws keyword. 
Otherwise we will get CTE.

5)
MyThread t=new MyThread()-->NEw/Born State-->
NEw/Born State-->t.start()-->Ready/Runnable state
Ready/Runnable state-->If thread shcedular allocates processor-->Running State
Running State-->If run() completes-->Dead state

Case1
Running State-->X-->Waiting State(blocked for joining)
Waiting State-->Y-->Ready/Runnable state
Where X is:
	1)t1.join();
	2)t1.join(1000);
	3)t1.join(1000, 100);
and Y is:
	1)if t1 completes
	2)if time expires
	3)if waiting thread get interrupted

Case2: What is the impact of notify() method in transition diagram.
Running State-->X1-->Waiting State
Waiting State-->X2-->Another Waiting State
Another Waiting State-->If waiting thread get lock-->Ready/Runnable state
Where X1 is:
	1)obj.wait();
	2)obj.wait(1000);
	3)obj.wait(1000, 100);
and X2 is:
	1)if waiting thread get notification
	2)if time expires
	3)if waiting thread get interrupted

Example1:
public class InterthreadCommunication11 {
	public static void main(String[] args) {
		ThreadB b = new ThreadB();
		b.start();
		System.out.println(b.total);	
	}
}
class ThreadB extends Thread {
	int total = 0;
	public void run() {
		for (int i = 1; i <= 1000000; i++)// n*(n+1)/2
		{
			total = total + i;
		}
	}
}
Output 1: 0
Output 2: 55
Output 3: 5050
Output: 0<=t.total<=5050


Example2:
class ThreadA
{
public static void main(String [] args)throws InterruptedException
{
	ThreadB b=new ThreadB();
	b.start();

     Thread.sleep(10000); //o/p:5050
     Thread.sleep(1000); //o/p:5050
     Thread.sleep(100); //o/p:5050
     Thread.sleep(10); //o/p:5050
     Thread.sleep(1); //o/p:5050
     Thread.sleep(0,1); //o/p:5050
     Thread.sleep(0); //o/p:0

	System.out.println(b.total);
}
}
class ThreadB extends Thread
{
	int total=0;
	public void run()
	{
		for(int i=1;i<=100;i++)//n*(n+1)/2
		{
			total=total+i;
		}
	}}
Output:5050



class ThreadA
{
public static void main(String [] args)throws InterruptedException
{
	ThreadB b=new ThreadB();
	b.start();

     b.join();
	System.out.println(b.total);
}
}
class ThreadB extends Thread	
{
	int total=0;
	public void run()
	{
		for(int i=1;i<=100;i++)//n*(n+1)/2
		{
			total=total+i;
		} 
		//1 carore lines of code
	}
}


//Following example using Runnable interface

class ThreadA
{
public static void main(String [] args)throws InterruptedException
{
	ThreadB b=new ThreadB();
	b.start();

    b.wait();
	System.out.println(b.total);
}
}
class ThreadB extends Thread
{
	int total=0;
	public void run()
	{
		for(int i=1;i<=100;i++)//n*(n+1)/2
		{
			total=total+i;
		}
		this.notify();
		//1 carore lines of code
	}
}
Output:RE,
Exception in thread "main" Exception in thread "Thread-0" java.lang.IllegalMonitorStateException
        at java.lang.Object.notify(Native Method)
        at ThreadB.run(ThreadA.java:21)
java.lang.IllegalMonitorStateException
        at java.lang.Object.wait(Native Method)
        at java.lang.Object.wait(Object.java:502)
        at ThreadA.main(ThreadA.java:8)




class ThreadA
{
public static void main(String [] args)throws InterruptedException
{
	ThreadB b=new ThreadB();
	b.start();
	synchronized(b)
	{
		System.out.println("Main thread is going to try to call wait() method");//1
		b.wait();//2
	}
	System.out.println("main thread got notification call");//5
	System.out.println(b.total);//6
}
}
class ThreadB extends Thread
{
	int total=0;
	public void run()
	{
		//synchronized(this){
			System.out.println("Child thread started calculation");//3
			for(int i=1;i<=100;i++)//n*(n+1)/2
			{
				total=total+i;
			}
			synchronized(this){
			System.out.println("Child thread trying to give notification");
			this.notify();//4
		    }
		//1 carore lines of code
	}
}
Output:
Main thread is going to try to call wait() method
Child thread started calculation
Child thread trying to give notification
main thread got notification call
5050

If you are expecting updation, it is highly recommended to use wait() & notify() method not yield(),join() or sleep();



class ThreadA
{
public static void main(String [] args)throws InterruptedException
{
	ThreadB b=new ThreadB();
	b.start();

//Thread.sleep(10000);//It will cause notify() call first and then wait() call and hence wait() will always wait for notification
	//b.sleep(10000);
	synchronized(b)
	{
System.out.println("Main thread is going to try to call wait() method");//1
b.wait();//2
	}
	System.out.println("main thread got notification call");//5
	System.out.println(b.total);//6
}
}
class ThreadB extends Thread
{
	int total=0;
	public void run()
	{
		synchronized(this)
		{
System.out.println("Child thread started calculation");//3
			for(int i=1;i<=100;i++)//n*(n+1)/2
			{
				total=total+i;
			}
System.out.println("Child thread trying to give notification");
			this.notify();//4
			System.out.println("Child thread given notification");
		}
		//1 carore lines of code
	}
}
Output:
Child thread started calculation
Child thread trying to give notification
Child thread given notification
Main thread is going to try to call wait() method
.
.
.
.

Sleeping is dangerous. It makes man very poor.
One student did not get job after few years due to sleeping in class. 
His father ask to come back to home , arrange , arrange marriage and do some business.



Producer-consumer problem
In The CR, it is given in details.

Queue
Producer thread
Consumer Thread

Producer thread is responsible to produce items into the Queue.
Consumer thread is responsible to consume items form the Queue.


class ConsumerThread
{	
		consume()
		{
			synchronized(q)
			{
					if(q isEmpty())
					{
							q.wait();
					}
					else
					{
							//comsume items
					}
			}
		}}
class ProducerThread
{
	produce()
	{
		synchronized()
		{
			//produce itms to queue
			q.notify();			
		}
	}	
}
If Queue is empty then ConsumerThread will call wait() method & entered into waiting state.
After producing items to the Queue, producer thread is responsible to call notify() method, 
then waiting consumer will get that notification & continue it execution with updated items.

If someone is there to notify then we use wait() otherwise we use wait(ms) or wait(ms,ns)




Difference b/w notify() & notifyAll()
We can use notify() method to give the notification for only one thread. 
If multiple threads are waiting then only one thread will be notified 
and the remaining threads have to wait for further notifications. 
Which thread will be notified , we cannot expect, it depends on JVM thread schedular.

Total 100 waiting threads
Obj1.wait()://60 threads
Obj2.wait()://40 threads

Obje1.notifyAll();//only 60 threads will be notified
We can use notifyAll() to give the notification for all waiting thread of a particular object. 
Even though multiple threads notified, but execution will be performed , one by one, 
because threads requires locks & only one lock is available.

Stack s1=new Stack();		
Stack s2=new Stack();
synchronized(s1)
{
.
.
.
.
s2.wait();//RE, IllegalMonitorStateException
}

synchronized(s1)
{
.
.
.
.
S1.wait();//valid
}
On which object, we are calling wait() method, thread required the lock of that particular object.
If we are calling wait() method on s1 then we have to get  lock of s1 object but not s2 object.















