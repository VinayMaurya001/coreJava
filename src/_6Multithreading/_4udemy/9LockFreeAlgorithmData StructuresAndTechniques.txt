Lock-free algorithm, Data Structures & Techniques
	Introduction to Non-blocking, lock free operations
	Atomic Integers & Lock free E-Commerce
	Atomic references, COmpare & Set, Lock-free High Performance Data Structure
	Lock-free Algorithm, Data Structures & Techniques
	
Introduction to Non-blocking, lock free operations
Problems & Limitations of Locks
Introduction to lock free programming
Review of Atomic Instruction
Introduction to a new group of atomic operations
	
Locks
	Everything we have learned so for about locks is very valuable.
	Majority of multithreaded programming is still done with locks(synchronized, ReentrantLock etc...)
	Most of the cocncurrency problem are easier & safer to solve with locks
	Locks have great software & hardware support.
	Using locks we can solve all concurrency issues.

Why learning lock free techniques?
As engineers we are always faced with a trade off
For most problems there is more than one solution
The more tools with have the better we can choose the right tool for the job
Being able to choose the right tool for the job is what makes a good engineer

Problems & Limitations of Locks
Deadlocks
	Deadlocks are generally unrecoverable
	Can bring the application to a complete halt
	The more lock in application, the higher the chances for a deadlock
Slow Critical Section
	Multiple threads using the same lock
	If One thread holds the lock for a very long time 
		That thread will slow down all other threads
		All threads become as slow as the slowest thread
	public void synchronized  m1(){}//
	public void synchronized  m2(//10000lines of code){}//Slow long Critical Section
Priority Inversion
	Two thread sharing a lock
		Low priority thread(document saver)
		High priority thread(UI)
	Low priority thread acquires the lock  & is preempted(scheduled out)
	High priority thread cannot progress because of the low priority thread not scheduled to release the lock.
Thread Not releasing a lock(Kill tolerance)
	Thread dies, gets interrupted or forgets to release the lock
	Leaves 	all thread hanging forever
	Unrecoverable, just like a deadlock
	To avoid, developers need ot write more complex code
Performance
	Peformance overhead in having contention over a lock
		ThreadA acquires a lock
		THreadB tries to acquire a lock & gets blocked
		ThreadB is scheduled out(Context switch)
		ThreadB is scheduled back(Context switch)
	Additional overhead may not be noticable for most applications
	But for latency sensitive applications, this overhead can be significant
	
	
Introduction to lock free programming
	Why do we need locks?
		Multiple threads acessing shared resources
		At least one thread modifying the shared resources
		Non atomic operations
	Non atomic operations-Reason
		Non atomic opration on one shared resource
		A single Java operation turns into one or more hardware operations
		Example : counter++
	Lock free solution-Breakdown	
		Utilize operation which are guranteed to be one hardware operation.
		A single hardware operation is:
			Atomic by definition
			THreads afe 
	Review of atomic instructions
		Read/assignment on all primitive types(except for ong & double)
		Read/assignment on all references
		Read/assignment on volatile long & double
	Avoiding data Races
		Read/assignment on all volatile primitive types & references
	Introduction to a new group of of atomic operations
		AtomicX Classes
			classes in java.util.concurrent.atomic package 
			https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/atomic/package-summary.html
			Internally uses the unsafe class which provide access to low level, native methods
			Utilize atform specific implementation of atomic operations
			
Atomic classes
AtomicBoolean	
A boolean value that may be updated atomically.
AtomicInteger	
An int value that may be updated atomically.
AtomicIntegerArray	
An int array in which elements may be updated atomically.
AtomicIntegerFieldUpdater<T>	
A reflection-based utility that enables atomic updates to designated volatile int fields of designated classes.
AtomicLong	
A long value that may be updated atomically.
AtomicLongArray	
A long array in which elements may be updated atomically.
AtomicLongFieldUpdater<T>	
A reflection-based utility that enables atomic updates to designated volatile long fields of designated classes.
AtomicMarkableReference<V>	
An AtomicMarkableReference maintains an object reference along with a mark bit, that can be updated atomically.
AtomicReference<V>	
An object reference that may be updated atomically.
AtomicReferenceArray<E>	
An array of object references in which elements may be updated atomically.
AtomicReferenceFieldUpdater<T,V>	
A reflection-based utility that enables atomic updates to designated volatile reference fields of designated classes.
AtomicStampedReference<V>	
An AtomicStampedReference maintains an object reference along with an integer "stamp", that can be updated atomically.
DoubleAccumulator	
One or more variables that together maintain a running double value updated using a supplied function.
DoubleAdder	
One or more variables that together maintain an initially zero double sum.
LongAccumulator	
One or more variables that together maintain a running long value updated using a supplied function.
LongAdder	
One or more variables that together maintain an initially zero long sum.


Atomic Integer
	int initialValue=10;
	AtomicInteger atomicInteger=new AtomicInteger(initialValue);
	atomicInteger.incrementAndGet();
		atomicInteger.getAndIncrement();
		atomicInteger.decrementAndGet();
		atomicInteger.getAndDecrement();
		atomicInteger.addAndGet();
	atomicInteger.getAndAdd();
	
Atomic Integer Pros 
	Simplicity
	No need for lock or synchronization
	No race conditions or data races
	
Atomic Integer COns
	Only the operation itself is atomic
	There is still race condition b/w 2 separate atomic operations
	atomicInteger.incrementAndGet();
	atomicInteger.addAndGet(-5);
	
Lock Free E-commerce Inventory Counter
	AtomicIntegersAndLockFreeECommerce.java


Summary
	AtomicInteger is a great tool for concurrent counting without complexity of using  lock.
	AtomicInteger should be used only when atomic operations are needed.
	It is on par & sometimes more performant than a regular integer with a lock as protection
	If used only by a single thread, a regular integer is perfect choice

	
	
Atomic references, COmpare & Set, Lock-free High Performance Data Structure
AtomicReference<T>
	new AtomicReference(V initialValue);
	V get();
	void set(V newValue);
	AtomicReference<T> wraps a reference to an object, 
		allows us to perform atomic operations on that reference , including the compareAndSet().
CAS-CompareAndSetOperation
	boolean compareAndSet(V expectedValue, V newValue)
		assign newValue if currentValue==expectedValue
		Ignores the newValue if currentValue!=expectedValue
	CAS is available in  all Atomic classes
	Compiles into an atomic hardware operation
	Many other atomic methods are internally implemented using CAS
Build Lock free datastructure-Stack
Compare performance with the blocking implementation
	AtomicReferencesCompareAndSetLockFreeHighPerformanceDataStructure.java	
	
	
