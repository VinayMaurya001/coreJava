//Kaushik Lambda Basic 18: generic lambda wrapper

Closures in Lambda Expression
public class ClosureExample {
public static void main(String[] args) {
	int a = 10;
	int b = 20;//final or effectively final
	doProcess(a, new Process() {
		@Override
		public void process(int i) {
			System.out.println(i + b);
		}
	}
	);
doProcess(a, i -> System.out.println(i + b));//
}
public static void doProcess(int i, Process p) {
	p.process(i);
}
}
interface Process {
	void process(int i);
}

The this reference in Lambda Expression
public class ReferenceExample {
public void doProcess(int i, Process p) {
	p.process(i);
}
public void execute() {
	doProcess(10, i -> {
		System.out.print(i);
		System.out.println(this);// NO CTE
	});
}
public static void main(String[] args) {
	ReferenceExample referenceExample = new ReferenceExample();
	referenceExample.doProcess(10, new Process() {
		@Override
		public void process(int i) {
			System.out.print(i);
			System.out.println(this);// override this with annonymous object
		}
		@Override
		public String toString() {
			return "Anonymous []";
		}
	});
	referenceExample.doProcess(10, i -> {
		System.out.println(i);
		// System.out.println(this);//CTE
	});
	referenceExample.execute();
}
@Override
public String toString() {
	return "ReferenceExample []";
}
}
interface Process {
	void process(int i);
}


Method references and Collections
Method references can be considered as an alternative way/syntax to writing lambda. It is very readable in certain scenarios.
public class MethodReferencesExample1 {
public static void main(String[] args) {
	Thread t1 = new Thread(() -> printMessage());
	t1.start();
	Thread t2 = new Thread(MethodReferencesExample1::printMessage);//()->method()
	t2.start();
}
private static void printMessage() {
	System.out.println("Hello");
}
}

public class MethodReferencesExample2 {
public static void main(String[] args) {
	List<Person> people = Arrays.asList(new Person("Charles", "Dickens", 60), new Person("Lewis", "Carroll", 42),
			new Person("Thomas", "Carlyle", 51), new Person("Carlatte", "Bronte", 45),
			new Person("Methew", "Arnold", 39));
	performConditionally(people, (p) -> true, (p) -> System.out.println(p)); 
// like printAll
	System.out.println();
	performConditionally(people, (p) -> true, System.out::println); 
// p->method(p)
	// performConditionally(people, (p) -> true, (p) -> System.out.println(p.getFirstName()));
}
private static void performConditionally(List<Person> people, Predicate<Person> condition,
		Consumer<Person> consumer) {
	for (Person p : people) {
		if (condition.test(p))
			consumer.accept(p);
	}
}
}

class Person {
	private String firstName;
	private String lastName;
	private int age;
}