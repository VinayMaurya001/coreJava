Supplier(I)
interface Supplier<R> {   
	   	 public R get();   
}
  
Sometimes our requirement is we have to get some value based on some operation like 
supply Student object Supply Random Name Supply Random OTP Supply Random Password etc 
For this type of requirements we should go for Supplier. 
Supplier can be used to supply items (objects). 
Supplier won't take any input and it will always supply objects. 
		 
Supplier Functional interface does not contain any default and static methods. 
 
Program-1 For Supplier to generate Random Name
	Example: SupplierFunctionalInterface.java (m1())
Program-2 For Supplier to supply System Date
	Example: SupplierFunctionalInterface.java (m2())

Program-3 For Supplier to supply 6-digit Random OTP
	Example: SupplierFunctionalInterface.java (m3())

Program-4 For Supplier to supply Random Passwords: 
	Rules: 
	1. length should be 8 characters 
	2. 2,4,6,8 places only digits 
	3. 1,3,5,7 only Capital Upper-case characters,@,#,$ 

	Example: SupplierFunctionalInterface.java (m4())

public class SupplierFunctionalInterface {

	public static void main(String[] args) {
		// m1();
		// m2();
		// m3();
		m4();
	}

	private static void m4() {
		Supplier<String> s = () -> {
			String symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZ#$@";
			Supplier<Integer> d = () -> (int) (Math.random() * 10);
			Supplier<Character> c = () -> symbols.charAt((int) (Math.random() * 29));
			String pwd = "";
			for (int i = 1; i <= 8; i++) {
				if (i % 2 == 0) {
					pwd = pwd + d.get();
				} else {
					pwd = pwd + c.get();
				}
			}
			return pwd;
		};
		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
	}

	private static void m3() {
		Supplier<String> otps = () -> {
			String otp = "";
			for (int i = 1; i <= 6; i++) {
				otp = otp + (int) (Math.random() * 10);
			}
			return otp;
		};
		System.out.println(otps.get());
		System.out.println(otps.get());
		System.out.println(otps.get());
		System.out.println(otps.get());
	}

	private static void m2() {
		Supplier<Date> s = () -> new Date();
		System.out.println(s.get());
		System.out.println(s.get());
	}

	private static void m1() {
		Supplier<String> s = () -> {
			String[] s1 = { "Sunny", "Bunny", "Chinny", "Pinny" };
			
			int x = ((int) (Math.random() * 10))%4;
			return s1[x];
		};
		System.out.println(s.get());
		System.out.println(s.get());
		System.out.println(s.get());
	}

}


Comparison table of Predicate, Function, Consumer and Supplier 
1) Purpose 
	To take some Input and perform some conditional checks 
	To take some Input and perform required Operation and  return the result  
	To consume  some Input and perform required Operation. It won’t return anything. 
	To supply some Value base on our Requirement
2) Interface Declaration 
	interface  Predicate <T> {   ::::::::::::: } 
	interface  Function <T, R> {   ::::::::::::: } 
	interface Consumer <T> {   ::::::::::::: } 
	interface Supplier <R> {   ::::::::::::: } 
3) Single Abstract Method(SAM) 
	public boolean test (T t); 
	public R apply (T t); 
	public void accept (T t); 
	public R get()
4) Default Methods 
	and(), or(), negate() 
	andThen(), compose() 
	andThen() 
	Supplier does not contain any Default method(also static methods).
5) Static Method 
	isEqual() ,not()
	identity() 
	Consumer does not contain any static method.
	Supplier does not contain any static method(also Default methods).




Primitive Specialization of Supplier Interface
IntSupplier
	getAsInt()
LongSupplier
	getAsLong()
DoubleSupplier
	getAsDouble()
BooleanSupplier
	getAsBoolean()


There is no BI-Supplier.


