Two-Argument (Bi) Functional Interfaces 

Normal Functional Interfaces (Predicate, Function and Consumer) can accept only one input argument. 
But sometimes our programming requirement is to accept two input arguments, 
	then we should go for two-argument functional interfaces. The following functional interfaces can take 2 input arguments. 
1. BiPredicate 
2. BiFunction 
3. BiConsumer 
 
1. BiPredicate(I): 
Normal Predicate can take only one input argument and perform some conditional check. 
Sometimes our programming requirement is we have to take 2 input arguments and perform some conditional check, 
	for this requirement we should go for BiPredicate. 
 
BiPredicate is exactly same as Predicate except that it will take 2 input arguments. 
 interface BiPredicate<T1,T2> {   
     public boolean test(T1 t1,T2 t2);   
     //remaining default methods: and(), or() , negate()   
 }   

To check the sum of 2 given integers is even or not by using BiPredicate: 
 import java.util.function.*;   
 class Test  {   
     public static void main(String[] args)    {
         BiPredicate<Integer,Integer> p=(a,b)->(a+b) %2==0;   
         System.out.println(p.test(10,20));   
         System.out.println(p.test(15,20));   
	}
}
Output: true 
		false


2.BiFunction: 
But sometimes our programming requirement to accept 2 input values and perform required operation and should return the result. 
	Then we should go for BiFunction. 
BiFunction is exactly same as function except that it will take 2 input arguments. 
 interface BiFunction<T,U,R> {   
     public R apply(T t,U u);  
     //default method andThen()   
  }   

To find product of 2 given integers by using BiFunction: 
         BiFunction<Integer,Integer,Integer> f=(a,b)->a*b;   
         System.out.println(f.apply(10,20));   
         System.out.println(f.apply(100,200));          

Program to create Student Object by taking name and rollno as input by using BiFunction
	Example: BiDirectonalFunctionalInterfaceDemo.java (m1())
Program to calculate Monthly Salary with Employee and TimeSheet objects as input By using BiFunction
	Example: BiDirectonalFunctionalInterfaceDemo.java (m2())


BiConsumer: 
BiConsumer is exactly same as Consumer except that it will take 2 input arguments. 
interface BiConsumer<T,U> {
    public void accept(T t,U u);  
   //default method andThen()   
}  

Program to accept 2 String values and print result of concatenation by using BiConsumer
	class Test {
  		public static void main(String[] args) {
  			BiConsumer<String,String> c=(s1,s2)->System.out.println(s1+s2);   
        	c.accept("durga","soft"); 
		}
	}
Output: durgasoft 

Program to increment employee Salary by using BiConsumer
	Example: BiDirectonalFunctionalInterfaceDemo.java (m3())



Comparison Table between One argument and Two argument Functional Interfaces: 
One Argument Functional Interface 		Two Argument Functional Interface 
interface Predicate<T> {     
	public boolean test(T t);     
	default Predicate and(Predicate P)     
	default Predicate or(Predicate P)     
	default Predicate negate()     
	static Predicate isEqual(Object o) 
} 

interface BiPredicate<T, U> {       
	public boolean test(T t, U u);       
	default BiPredicate and(BiPredicate P)       
	default BiPredicate or(BiPredicate P)       
	default BiPredicate negate() 
}

interface Function<T, R> {       
	public R apply(T t);       
	default Function andThen(Function F)       
	default Function compose(Function F)       
	static Function identify() 
} 

interface BiFunction<T, U, R> {     
	public R apply(T t, U u); 
	default BiFunction andThen(Function F) 
} 

interface Consumer<T> {     
	public void accept(T t);     
	default Consumer andThen(Consumer C) 
} 

interface BiConsumer<T, U> {     
	public void accept(T t, U u);     
	default BiConsumer andThen(BiConsumer C) 
}

