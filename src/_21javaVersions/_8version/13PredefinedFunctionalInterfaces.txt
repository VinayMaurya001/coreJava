Predefined Functional Interfaces ( import Java.util.function.*;   )
	Predicate
	Function
		UnaryOperator
			public interface UnaryOperator<T> extends Function<T, T> {}
	Consumer 
	Supplier
	
	
	BiPredicate
		public interface BiPredicate<T, U> {boolean test(T t, U u);}
	BiFunction
		public interface BiFunction<T, U, R> {R apply(T t, U u);}
		BinaryOperator
			public interface BinaryOperator<T> extends BiFunction<T,T,T> {}
	BiConsumer
		public interface BiConsumer<T, U> {  void accept(T t, U u);}


http://tutorials.jenkov.com/java-functional-programming/functional-interfaces.html

	Primitive Functional
	
	//IntBinaryOperator
		//IntConsumer
		//IntFunction
		//IntPredicate
		//IntSupplier
		//IntToDoubleFunction
		//IntToLongFunction
		//IntUnaryOperator
		
		//Long, Double, Int
		
		
	FP03FunctionalInterfaces.java
	FP03FunctionalInterfaces2.java
	
	Comparator
  Comparator<Course> comparingByNoOfStudentsIncreasing 
					= Comparator.comparingInt(Course::getNoOfStudents);


Behaviour Parameterization with FP




Comparison Table of Predicate, Function, Consumer and Supplier 
Property 	Predicate 	Function 	Consumer 	Supplier 
1) Purpose 
	To take some Input and perform some conditional checks 
	To take some Input and perform required Operation and  return the result  
	To consume  some Input and perform required Operation. It won’t return anything. 
	To supply some Value base on our Requirement
2) Interface Declaration 
	interface  Predicate <T> {   ::::::::::::: } 
	interface  Function <T, R> {   ::::::::::::: } 
	interface Consumer <T> {   ::::::::::::: } 
	interface Supplier <R> {   ::::::::::::: } 
3) Single Abstract Method(SAM) 
	public boolean test (T t); 
	public R apply (T t); 
	public void accept (T t); 
	public R get()
4) Default Methods 
	and(), or(), negate() 
	andThen(), compose() 
	andThen() 
	- 
5) Static Method 
	isEqual() 
	identity() 
	- 
	-

Supplier does not contain any Default and static methods.