Primitive Type Functional Interfaces 
 
What is the Need of Primitive Type Functional Interfaces? 
1. Autoboxing: 
	Automatic conversion from primitive type to Object type by compiler is called autoboxing. 
 	Auto-boxing
	Integer I = 10;//auto-boxing
-->	Integer I = Integer.valueOf(10);
 	
2. Auto-unboxing: 
	Automatic conversion from object type to primitive type by compiler is called autounboxing.
	Auto-unboxing
	Integer I = new Integer(10);
	int x = I;//auto-unboxing
	int x = I.intValue();
		
PrimitiveType --> AutoBoxing --> Wrapper Object Type
PrimitiveType <-- Auto unboxing <-- Wrapper Object Type

3. In the case of generics, the type parameter is always object type and no chance of passing primitive type.  
ArrayList<Integer> l = new ArrayList<Integer>();//valid 
ArrayList<int> l = new ArrayList<int>();//invalid 

Need of Primitive Functional Interfaces: 
In the case of normal Functional interfaces (like Predicate, Function etc) input and return types are always Object types. 
If we pass primitive values then these primitive values will be converted to Object type (Auboxing), 
	which creates performance problems
class Test  {  
	public static void main(String[] args)    {       
		int[] x ={0,5,10,15,20,25};  
		Predicate<Integer> p=i->i%2==0;  
        for (int x1 : x)  {
  	      if(p.test(x1))   {
  	      	System.out.println(x1);  
	      } 
	    }
	}  
}
In the above examples,6 times autoboxing and autounboxing happening which creates Performance problems. 

To overcome this problem primitive functional interfaces introduced, which can always takes primitive types as input and return primitive types.
Hence autoboxing and autounboxing won't be required,which improves performance. 



Primitive Type Functional Interfaces for Predicate:  
The following are various primitive Functional interfaces for Predicate. 
	1.IntPredicate-->always accepts input value of int type 
	2.LongPredicate-->always accepts input value of long type 
	3.DoublePredicate-->always accepts input value of double type 

1.  
 interface IntPredicate {   
    public boolean test(int i);   
    //default methods: and(),or(),negate()   
 }   
2.  
 interface LongPredicate {   
 	public boolean test(long l);   
    //default methods: and(),or(),negate()   
 }   
3.  
 interface DoublePredicate {  
 	public boolean test(double d);   
   //default methods: and(),or(),negate()  
 }   


Program for IntPredicate
 class Test{
 	public static void main(String[] args){
 		int[] x ={0,5,10,15,20,25};  
		IntPredicate p=i->i%2==0;   
	    for (int x1 : x)  {
  	      if(p.test(x1)) {
  	 	     System.out.println(x1);   
		  }
		}
	}
 }
In the above example, autoboxing and autounboxing won't be performed internally.Hence performance wise improvements are there.



Primitive Type Functional Interfaces for Function: 
The following are various primitive Type Functional Interfaces for Function 
1. IntFunction: 
	can take int type as input and return any type     
	public R apply(int i); 
2. LongFunction: 
	can take long type as input and return any type    
	public R apply(long i); 
3. DoubleFunction: 
	can take double type as input and return any type    
	public R apply(double d); 
4. ToIntFunction: 
	It can take any type as input but always returns int type     
	public int applyAsInt(T t) 
5. ToLongFunction: 
	It can take any type as input but always returns long type     
	public long applyAsLong(T t) 
6. ToDoubleFunction: 
	It can take any type as input but always returns double type    
	public int applyAsDouble(T t)     
7. IntToLongFunction: 
	It can take int type as input and returns long type          
	public long applyAsLong(int i
8. IntToDoubleFunction: 
	It can take int type as input and returns long type          
	public double applyAsDouble(int i)  
9. LongToIntFunction: 
	It can take long type as input and returns int type          
	public int applyAsInt(long i) 
10. LongToDoubleFunction: 
	It can take long type as input and returns double type          
	public int applyAsDouble(long i) 
11. DoubleToIntFunction: 
	It can take double type as input and returns int type          
	public int applyAsInt(double i) 
12. DoubleToLongFunction: 
	It can take double type as input and returns long type          
	public int applyAsLong(double i)  
13. ToIntBiFunction:
	return type must be int type but inputs can be anytype    
	public int applyAsInt(T t, U u) 
14. ToLongBiFunction:
	return type must be long type but inputs can be anytype    
	public long applyAsLong(T t, U u) 
15. ToDoubleBiFunction: 
	return type must be double type but inputs can be anytype     
	public double  applyAsDouble(T t, U u) 
 
Program to find square of given integer by using Function
class Test{
	public static void main(String[] args){         
		IntFunction<Integer,Integer> f=i->i*i;  
	   	System.out.println(f.apply(4));
	}
}	

Program to find square of given integer by using IntFunction
class Test{
	public static void main(String[] args){         
		IntFunction<Integer> f=i->i*i;  
	   	System.out.println(f.apply(5));
	}
} 

Program to find length of the given String by using Function
class Test{
	public static void main(String[] args){         
		Function<String,Integer> f=s->s.length();   
	   	System.out.println(f.apply("durga"));
	}
} 

Program to find length of the given String by using ToIntFunction
class Test{
	public static void main(String[] args){         
		ToIntFunction<String> f=s->s.length();   
	   	System.out.println(f.applyAsInt("durga"));
	}
} 

Program to find square root of given integer by using Function
class Test{
	public static void main(String[] args){         
		Function<Integer,Double> f=i->Math.sqrt(i);    
	   	System.out.println(f.apply(7));
	}
} 

class Test{
	public static void main(String[] args){         
		IntToDoubleFunction f=i->Math.sqrt(i);     
	   	System.out.println(f.applyAsDouble(9));
	}
}


Primitive Version for Consumer: 
The following 6 primitive versions available for Consumer: 
1.  IntConsumer     
	public void accept(int value) 
2.  LongConsumer     
	public void accept(long value) 
3.  DoubleConsumer     
	public void accept(double value) 
4. ObjIntConsumer<T>     
	public void accept(T t,int value) 
5. ObjLongConsumer<T>     
	public void accept(T t,long value) 
6. ObjDoubleConsumer<T>     
	public void accept(T t,double value) 
 
Demo Program for IntConsumer
class Test{
	public static void main(String[] args){         
		 IntConsumer c= i->System.out.println("The Square of i:"+(i*i));  
	  	 c.accept(10);
	}
}
Output: The Square of i:100 

Program to increment employee Salary by using ObjDoubleConsumer
class Employee{
    String name;   
	double salary;
	Employee(String name,double salary) {
		this.name=name; 
		this.salary=salary;   
	}
}

class Test {
	public static void main(String[] args){
		ArrayList<Employee> l= new ArrayList<Employee>();
	  	populate(l); 
		ObjDoubleConsumer<Employee> c=(e,d)->e.salary=e.salary+d;  
		for(Employee e:l){
			c.accept(e,500.0);
	    }
	    for(Employee e:l){
	    	System.out.println("Employee Name:"+e.name);  
			System.out.println("Employee Salary:"+e.salary);  
			System.out.println();   
		}
	}
	public static void populate(ArrayList<Employee> l){
		l.add(new Employee("Durga",1000));  
		l.add(new Employee("Sunny",2000));   
 		l.add(new Employee("Bunny",3000)); 
		l.add(new Employee("Chinny",4000));
	}
}
Output: 
Employee Name:Durga 
Employee Salary:1500.0 
 
Employee Name:Sunny 
Employee Salary:2500.0 
 
Employee Name:Bunny 
Employee Salary:3500.0 
 
Employee Name:Chinny 
Employee Salary:4500.0 


Primitive Versions for Supplier: 
The following 4 primitive versions available for Supplier: 
1. IntSupplier     
	public int getAsInt(); 
2. LongSupplier     
	public long getAsLong() 
3. DoubleSupplier     
	public double getAsDouble() 
4. BooleanSupplier     
	public boolean getAsBoolean() 
 
Program to generate 6 digit random OTP by using IntSupplier
class Test{
	public static void main(String[] args){
		IntSupplier s=()->(int)(Math.random()*10);
 		String otp="";  
		for(int i =0;i<6;i++) {
			otp=otp+s.getAsInt();  
        }
        System.out.println("The 6 digit OTP: "+otp); 
	}
}
Output: The 6 digit OTP: 035716


UnaryOperator<T>: 
If input and output are same type then we should go for UnaryOperator 
	It is child of Function<T,T> 
class Test {
	public static void main(String[] args) { 
		Function<Integer,Integer> f=i->i*i; 
		System.out.println(f.apply(5)); 
	}
}	

class Test{
	public static void main(String[] args){
		UnaryOperator<Integer> f=i->i*i;  
		System.out.println(f.apply(6)); 
	}
}


The primitive versions for UnaryOperator: 
IntUnaryOperator:     
	public int applyAsInt(int) 
LongUnaryOperator:     
	public long applyAsLong(long) 
DoubleUnaryOperator:     
	public double applyAsDouble(double) 
 
Demo Program-1 for IntUnaryOperator
class Test{
	public static void main(String[] args){
    	IntUnaryOperator f=i->i*i; 
    	System.out.println(f.applyAsInt(6));   
	}
}	

Demo Program-2 for IntUnaryOperator
class Test{
	public static void main(String[] args){
    	  IntUnaryOperator f1=i->i+1;
		  System.out.println(f1.applyAsInt(4)); 
		  IntUnaryOperator f2=i->i*i;   
		  System.out.println(f2.applyAsInt(4));
		  System.out.println(f1.andThen(f2).applyAsInt(4));  
	}
}
Output: 5 16 25 


BinaryOperator: 
It is the child of BiFunction<T,T,T> 
BinaryOperator<T>   
 public T apply(T,T) 

class Test{
	public static void main(String[] args){
    	 BiFunction<String,String,String> f=(s1,s2)->s1+s2;
		 System.out.println(f.apply("durga","software"));     
	}
}	

class Test{
	public static void main(String[] args){
    	 BinaryOperator<String> b=(s1,s2)->s1+s2; 
		 System.out.println(b.apply("durga","software"));  
	}
}	

The primitive versions for BinaryOperator: 
1. IntBinaryOperator     
	public int applyAsInt(int i,int j) 
2. LongBinaryOperator     
	public long applyAsLong(long l1,long l2) 
3. DoubleBinaryOperator     
	public double applyAsLong(double d1,double d2) 

class Test{
	public static void main(String[] args){
    	BinaryOperator<Integer> b=(i1,i2)->i1+i2;     
		System.out.println(b.apply(10,20)); 
	}
}

class Test{
	public static void main(String[] args){
    	  IntBinaryOperator b=(i1,i2)->i1+i2;    
		  System.out.println(b.applyAsInt(10,20));   
	}
}	

//java.util.Function


