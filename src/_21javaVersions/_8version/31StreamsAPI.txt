Streams API (Since 1.8v)
It contains classes for processing sequences of elements.
To process objects of the collection.

The central API class is the Stream<T>. 

What is the differences between Java.util.streams and Java.io streams? 
	java.util streams meant for processing objects from the collection. 
	i.e, it represents a stream of objects from the collection 
		but Java.io streams meant for processing binary 
		and character data with respect to file.  i.e it represents stream of binary data or character data from the file.
		hence  Java.io streams and Java.util streams both are different. 

What is the difference between collection and stream?   
	If we want to represent a group of individual objects as a single entity then We should go for collection. 
		If we want to process a group of objects from the collection then we should go for streams. 
	We can create a stream object to the collection by using stream() method of Collection interface.
		stream() method is a default method added to the Collection in 1.8 version. 
		default Stream stream()   

Ex: Stream s = c.stream();  	
Stream is an interface present in java.util.stream. 
	Once we got the stream, by using that we can process objects of that collection. 
We can process the objects in the following 2 phases 
 	1.Configuration 
 	2.Processing
	

Paradigm Shift
	Fundamental Change in Approach

Stream Creation
There are many ways to create a stream instance of different sources. 
Once created, the instance will not modify its source, 
	therefore allowing the creation of multiple instances from a single source.

1)	Empty Stream
	    Stream<String> streamEmpty = Stream.empty();
			public Stream<String> streamOf(List<String> list) {
    			return list == null || list.isEmpty() ? Stream.empty() : list.stream();}
2)	Stream of Collection
		Stream can also be created of any type of Collection (Collection, List, Set):
		Collection<String> collection = Arrays.asList("a", "b", "c");
		//List.of() is introduced in Java 9.
		//In Java 8, Arrays.asList() is a good alternative.
		Stream<String> streamOfCollection = collection.stream();
		A stream() default method is added to the Collection interface
3)	Stream of Array
		Stream<String> streamOfArray = Stream.of("a", "b", "c");
		They can also be created out of an existing array or of a part of an array:
		String[] arr = new String[]{"a", "b", "c"};
		Stream<String> streamOfArrayFull = Arrays.stream(arr);
		Stream<String> streamOfArrayPart = Arrays.stream(arr, 1, 3);
4)	Stream.builder()
	When builder is used the desired type should be additionally specified in the right part of the statement, 
		otherwise the build() method will create an instance of the Stream<Object>:
	Stream<String> streamBuilder = Stream.<String>builder().add("a").add("b").add("c").build();
5)Stream.generate()
	The generate() method accepts a Supplier<T> for element generation. 
		As the resulting stream is infinite, developer should specify the desired size or 
		the generate() method will work until it reaches the memory limit:
	Stream<String> streamGenerated =Stream.generate(() -> "element").limit(10);
	System.out.println(streamGenerated.collect(Collectors.toList()));
	The code above creates a sequence of ten strings with the value – “element”.
6)Stream.iterate()
	Stream<Integer> streamIterated = Stream.iterate(40, n -> n + 2).limit(20);
	The first element of the resulting stream is a first parameter of the iterate() method. 
	For creating every following element the specified function is applied to the previous element. 
	In the example above the second element will be 42.
7)Stream of Primitives
	Java 8 offers a possibility to create streams out of three primitive types: int, long and double. 
	As Stream<T> is a generic interface and there is no way to use primitives as a type parameter with generics, 
		three new special interfaces were created: IntStream, LongStream, DoubleStream.
	Using the new interfaces alleviates unnecessary auto-boxing allows increased productivity:
		IntStream intStream = IntStream.range(1, 3);
		LongStream longStream = LongStream.rangeClosed(1, 3);
	The range(int startInclusive, int endExclusive) method creates an ordered stream from the first parameter to the second parameter. 
	It increments the value of subsequent elements with the step equal to 1. 
	The result doesn't include the last parameter, it is just an upper bound of the sequence.
	The rangeClosed(int startInclusive, int endInclusive) method does the same with only one difference – the second element is included. 
	These two methods can be used to generate any of the three types of streams of primitives.
	
	Since Java 8 the Random class provides a wide range of methods for generation streams of primitives. 
	For example, the following code creates a DoubleStream, which has three elements:
		Random random = new Random();
		DoubleStream doubleStream = random.doubles(3);
	
8)Stream of String
	String can also be used as a source for creating a stream.
	With the help of the chars() method of the String class. 
	Since there is no interface CharStream in JDK, the IntStream is used to represent a stream of chars instead.
		IntStream streamOfChars = "abc".chars();
	The following example breaks a String into sub-strings according to specified RegEx:
		Stream<String> streamOfString =
	    Pattern.compile(", ").splitAsStream("a, b, c");	
9)Stream of File
	Java NIO class Files allows to generate a Stream<String> of a text file through the lines() method. 
	Every line of the text becomes an element of the stream:
		Path path = Paths.get("C:\\file.txt");
		Stream<String> streamOfStrings = Files.lines(path);
		Stream<String> streamWithCharset = Files.lines(path, Charset.forName("UTF-8"));
		The Charset can be specified as an argument of the lines() method.
	
Referencing a Stream
It is possible to instantiate a stream and to have an accessible reference to it as long as 
	only intermediate operations were called. 
	Executing a terminal operation makes a stream inaccessible.
To demonstrate this we will forget for a while that the best practice is to chain sequence of operation. 
	Besides its unnecessary verbosity, technically the following code is valid:
		Stream<String> stream = Stream.of("a", "b", "c").filter(element -> element.contains("b"));
		Optional<String> anyElement = stream.findAny();
	But an attempt to reuse the same reference after calling the terminal operation will trigger the IllegalStateException:
		Optional<String> firstElement = stream.findFirst();
	As the IllegalStateException is a RuntimeException, a compiler will not signalize about a problem. 
	So, it is very important to remember that Java 8 streams can't be reused.
This kind of behavior is logical because streams were designed to provide an ability 
	to apply a finite sequence of operations to the source of elements in a functional style, but not to store elements.
So, to make previous code work properly some changes should be done:
		List<String> elements =Stream.of("a", "b", "c").filter(element -> element.contains("b")).collect(Collectors.toList());
		Optional<String> anyElement = elements.stream().findAny();
		Optional<String> firstElement = elements.stream().findFirst();

Stream Pipeline
	To perform a sequence of operations over the elements of the data source and aggregate their results, 
		three parts are needed – the source, intermediate operation(s) and a terminal operation.
	Intermediate operations return a new modified stream. 
	For example, to create a new stream of the existing one without few elements the skip() method should be used:

Stream<String> onceModifiedStream =
  Stream.of("abcd", "bbcd", "cbcd").skip(1);
If more than one modification is needed, intermediate operations can be chained. 
Assume that we also need to substitute every element of current Stream<String> with a sub-string of first few chars. 
This will be done by chaining the skip() and the map() methods:
	Stream<String> twiceModifiedStream =
	  stream.skip(1).map(element -> element.substring(0, 3));


Multi-threading With Streams
	list.parallelStream().forEach(element -> doWork(element));
	

Stream Operations
There are many useful operations that can be performed on a stream.
They are divided into 
	intermediate operations (return Stream<T>) and 
	terminal operations (return a result of definite type). 
	Intermediate operations allow chaining.
	It's also worth noting that operations on streams don't change the source.
	long count = list.stream().distinct().count();

Iterating
	Stream API helps to substitute for, for-each and while loops. 
	It allows concentrating on operation's logic, but not on the iteration over the sequence of elements.
		boolean isExist = list.stream().anyMatch(element -> element.contains("a"));
		
Filtering
	The filter() method allows us to pick stream of elements which satisfy a predicate.
	Stream<String> stream = list.stream().filter(element -> element.contains("d"));

Mapping
	List<String> uris = new ArrayList<>();
	uris.add("C:\\My.txt");
	Stream<Path> stream = uris.stream().map(uri -> Paths.get(uri));
	So, the code above converts Stream<String> to the Stream<Path> by applying a specific lambda expression to every element of the initial Stream.

	If you have a stream where every element contains its own sequence of elements and 
		you want to create a stream of these inner elements, you should use the flatMap() method:
		List<Detail> details = new ArrayList<>();
		details.add(new Detail());
		Stream<String> stream= details.stream().flatMap(detail -> detail.getParts().stream());
		In this example, we have a list of elements of type Detail. 
		The Detail class contains a field PARTS, which is a List<String>. 
		With the help of the flatMap() method every element from field PARTS will be extracted and added to the new resulting stream. 
		After that, the initial Stream<Detail> will be lost.

Matching
	boolean isValid = list.stream().anyMatch(element -> element.contains("h")); // true
	boolean isValidOne = list.stream().allMatch(element -> element.contains("h")); // false
	boolean isValidTwo = list.stream().noneMatch(element -> element.contains("h")); // false
	
Reduction
	List<Integer> integers = Arrays.asList(1, 1, 1);
	Integer reduced = integers.stream().reduce(23, (a, b) -> a + b);
    
Collecting
	List<String> resultList = list.stream().map(element -> element.toUpperCase()).collect(Collectors.toList());
	The reduction can also be provided by the collect() method of type Stream. 
	This operation is very handy in case of converting a stream to a Collection or a Map and representing a stream in form of a single string.
	There is a utility class Collectors which provide a solution for almost all typical collecting operations. 
	For some, not trivial tasks, a custom Collector can be created.

https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-streams-2

https://beginnersbook.com/2017/10/java-8-stream-tutorial/
http://www.cloud-explained.com/how-stream-api-in-java-works/
https://stackify.com/streams-guide-java-8/
	peek() vs forEach()
http://tutorials.jenkov.com/java-functional-programming/streams.html

Intermediate Operations: return streams
filter()
map()
reduce()

Terminal Operations: return void or T
forEach()
collect()


Example:
FP01Functional.java 
FP02Functional.java
	Comparator<EmployeeDetails2> empNameComparator = Comparator.comparing(EmployeeDetails2::getName)
				.thenComparing((emp) -> -emp.salary);
	Collections.sort(eList, empNameComparator);
	eList.forEach(System.out::println);

	System.out.println(eList.stream()
				.sorted(Comparator.comparing(EmployeeDetails2::getName).thenComparing((emp) -> -emp.salary))
				.collect(Collectors.toList()));

	Comparator<EmployeeDetails2> empNameComparator2 = Comparator.comparing(EmployeeDetails2::getName).reversed();
		Collections.sort(eList, empNameComparator2);
		eList.forEach(System.out::println);
https://www.javabrahman.com/java-8/the-complete-java-8-comparator-tutorial-with-examples/
Comparator interface????????????

FP03BehaviorParameterization.java
FP03FunctionalInterfaces.java
FP03FunctionalInterfaces2.java

 List<Integer> result =ffgchfgh;
            result.stream().map(Object::toString).collect(joining(" "));// 7 5 9


	
Configuration 
We can configure either by using 
	filter mechanism or 
	map mechanism. 
 
Configuring Stream
If we want to filter some elements from stream then we use filter() method.
	filter(Predicate<T> t)
If for every element present inside stream, to create an equivalent object based on some function/operation, 
	then we use map() method.
	map(Function<T,R> f)

Filtering: 
We can configure a filter to filter elements from the collection based on some boolean condition 
	by using filter() method of Stream interface. 
public Stream filter(Predicate<T> t) 
	here (Predicate<T > t ) can be  a boolean valued function/lambda expression
Ex: 
Stream s = c.stream(); 
Stream s1 = s.filter(i -> i%2==0); 
Hence to filter elements of collection based on some Boolean condition we should go for filter() method.
 
Mapping: 
If we want to create a separate new object, for every object present in the collection based on our requirement 
	then we should go for map() method of Stream interface. 
public Stream map (Function f); 
	Here f can be lambda expression also 
Ex:           
Stream s = c.stream();           
Stream s1 = s.map(i-> i+10); 
Once we performed configuration we can process objects by using several methods. 

Methods
	collect()- It collects values form streams
	count()-It gives number of elements presents in the stream.
	sorted()-For natural sorting order
	sorted(Comparator C)-for customized sorting order
	max(Comparator C)-for max value present in stream according to comparator
	min(Comparator C)- for mix value present in stream according to comparator
	toArray()-copy element present in stream to array
	stream.of()
	foreach(lambda expression)-
	
Processing
processing by collect() method  
Processing by count()method 
Processing by sorted()method 
Processing by min() and max() methods 
forEach() method 
toArray() method 
Stream.of()method 
	
	
	
Processing by collect() method  
This method collects the elements from the stream and adding to the specified to the collection indicated (specified) by argument. 
Ex 1: To collect only even numbers from the array list 	
	ArrayList<Integer> l1 = new ArrayList<Integer>();   
                     for(int i=0; i<=10; i++) {   
                           l1.add(i);   
                     }   
                     System.out.println(l1);
Approach-1: Without Streams    
                     ArrayList<Integer> l2 = new ArrayList<Integer>();   
                     for(Integer i:l1) {   
                              if(i%2 == 0)   
                                      l2.add(i);   
                     }   
                     System.out.println(l2);   
Approach-2: With Streams  
                     List<Integer> l2 = l1.stream().filter(i -> i%2==0).collect(Collectors.toList());   
                     System.out.println(l2);   
         


Ex: Program for map() and collect() Method 
          List<String> l2 = list.Stream().map(s ->s.toUpperCase()).collect(Collectors.toList());   
          System.out.println(l2);   

II.Processing by count()method 
This method returns number of elements present in the stream. 
public long count()   
Ex:  long count = l.stream().filter(s ->s.length()==5).count();  
	sop(“The number of 5 length strings is:”+count);   

III.Processing by sorted()method 
If we sort the elements present inside stream then we should go for sorted() method. 
	the sorting can either default natural sorting order or customized sorting order specified by comparator. 
	sorted()- default natural sorting order 
	sorted(Comparator c)-customized sorting order. 
Ex: List<String> l3=l.stream().sorted().collect(Collectors.toList()); 
	sop(“according to default natural sorting order:”+l3); 
	List<String> l4=l.stream().sorted((s1,s2) -> -s1.compareTo(s2)).collect(Collectors.toList()); 
	sop(“according to customized sorting order:”+l4); 


IV.Processing by min() and max() methods 
min(Comparator c) returns minimum value according to specified comparator. 
max(Comparator c) returns maximum value according to specified comparator 
Ex: String min=l.stream().min((s1,s2) -> s1.compareTo(s2)).get(); 
	sop(“minimum value is:”+min); 
	String max=l.stream().max((s1,s2) -> s1.compareTo(s2)).get(); 
	sop(“maximum value is:”+max); 
 
V.forEach() method 
This method will not return anything. This method will take lambda expression as argument and 	
	apply that lambda expression for each element present in the stream. 
Ex: l.stream().forEach(s->sop(s)); 
   l3.stream().forEach(System.out:: println); 
Ex: 
                        ArrayList<Integer> l1 = new ArrayaList<Integer>();   
                        l1.add(0); l1.add(15); l1.add(10); l1.add(5); l1.add(30); l1.add(25); l1.add(20);   
                        System.out.println(l1);   
                        ArrayList<Integer> l2=l1.stream().map(i-> i+10).collect(Collectors.toList());   
                        System.out.println(l2);   
                        long count = l1.stream().filter(i->i%2==0).count();   
                        System.out.println(count);   
                        List<Integer> l3=l1.stream().sorted().collect(Collectors.toList());   
                        System.out.println(l3);   
                        Comparator<Integer> comp=(i1,i2)->i1.compareTo(i2);   
                        List<Integer> l4=l1.stream().sorted(comp).collect(Collectors.toList());   
                        System.out.println(l4);   
	                    Integer min=l1.stream().min(comp).get();   
                        System.out.println(min);   
                        Integer max=l1.stream().max(comp).get();   
                        System.out.println(max);   
 						l3.stream().forEach(i->sop(i));   
                        l3.stream().forEach(System.out:: println);   
               }
    }
    
VI.toArray() method 
We can use toArray() method to copy elements present in the stream into specified array 
 Integer[] ir = l1.stream().toArray(Integer[] :: new);  
 for(Integer i: ir) {                          
 	sop(i);               
 } 
 
VII.Stream.of()method 
We can also apply a stream for group of values and for arrays. 
Ex: Stream s=Stream.of(99,999,9999,99999); 
	s.forEach(System.out:: println); 
	Double[] d={10.0,10.1,10.2,10.3}; 
	Stream s1=Stream.of(d); 
	s1.forEach(System.out :: println); 
	
	
	
FP04CustomClass.java   
courses.stream().allMatch(course -> course.getReviewScore() > 95);//true,false                       
allMatch()
noneMatch()
anyMatch()

Comparator
Comparator<Course> comparingByNoOfStudentsIncreasing = Comparator.comparingInt(Course::getNoOfStudents);
Comparator<Course> comparingByNoOfStudentsAndNoOfReviews 
				= Comparator.comparingInt(Course::getNoOfStudents)
							.thenComparingInt(Course::getReviewScore)
							.reversed();

Comparator.comparing().reversed()
Comparator.thenComparing()
Comparator.comparingInt()

sorted()
				courses.stream()
				.sorted(comparingByNoOfStudentsAndNoOfReviews)
				.limit(5)
				.collect(Collectors.toList())
skip(2)
limit(2)
takeWhile()
dropWhile()
 
max()
min()
orElse()
findFirst()
findAny()

map()
	
mapToInt()
sum()
		int sum = Stream.of(1, 2, 3).reduce(0, (a, b) -> a + b);
		int sum = numbers.stream().reduce(0, Integer::sum);
		int sum = numbers.parallelStream().reduce(0, Integer::sum);
		 	IntStream.of(integers).sum();
		 	
		 If you have a list of objects and wanted to sum specific fields of this object use the below.
				List<ResultSom> somList = MyUtil.getResultSom();
				BigDecimal result= somList.stream().map(ResultSom::getNetto).reduce(BigDecimal.ZERO, BigDecimal::add);
		System.out.println(sum);
		sum = Stream.of(10, 2, 3).mapToInt(x -> x).sum();
		System.out.println(sum);
		System.out.println(Arrays.asList(1, 2, 3).stream().mapToInt(i -> i.intValue()).sum());
		System.out.println(Arrays.asList(1, 2, 3).stream().mapToInt(Integer::intValue).sum());
	     stream().collect(Collectors.summingInt(Integer::intValue));
	LongAdder a = new LongAdder();
map.values().parallelStream().forEach(a::add);
sum = a.intValue();

avg()
count()
	
		List<Integer> a = Arrays.asList(1, 2, 3,5);
		List<Integer> b = Arrays.asList(2, 2, 1,2);
		List<Integer> list = Arrays.asList(
				(int) IntStream.range(0, a.size()).filter(i -> a.get(i) > b.get(i)).count(),
				(int) IntStream.range(0, a.size()).filter(i -> a.get(i) < b.get(i)).count());
		System.out.println(list);//[2, 1]
		Arrays.stream(arr).parallel().sum()
max()

courses.stream().collect(Collectors.groupingBy(Course::getCategory))
Collectors.groupingBy(Course::getCategory)
Collectors.groupingBy(Course::getCategory, Collectors.counting())
Collectors.groupingBy(Course::getCategory, Collectors.maxBy(Comparator.comparing(Course::getReviewScore)))
Collectors.groupingBy(Course::getCategory, Collectors.mapping(Course::getName, Collectors.toList()))


Stream.of(): Reference pipeline
Arrays.stream():Primitive Pipeline

Higher Order functions
Predicate<Course> reviewScoreGreaterThan95Predicate2 = createPredicateWithCutoffReviewScore(95);
private static Predicate<Course> createPredicateWithCutoffReviewScore(int cutoffReviewScore) {
		return course -> course.getReviewScore() > cutoffReviewScore;
	}
	

JShellCode.md



Functional Programming & Performance
	Intermediate Stream operations are lazy.
courses.stream().filter(courses -> courses.length()>11).map(String::toUpperCase).findFirst()
courses.stream().peek(System.out::println).filter(courses -> courses.length()>11).map(String::toUpperCase).peek(System.out::println).findFirst()
courses.stream().peek(System.out::println).filter(courses -> courses.length()>11).map(String::toUpperCase).peek(System.out::println)
$4.findFirst()//Change $4 to your variable name

Improving Performance with Parallalzation of Streams
		long time = System.currentTimeMillis();
		//0, 1000000000 869
		//System.out.println(LongStream.range(0,1000000000).sum());//499999999500000000
		//601
		System.out.println(LongStream.range(0,1000000000).parallel().sum());	
		System.out.println(System.currentTimeMillis() - time);
	


Modifying lists with replaceAll and removeIf
List<String> courses = List.of("Spring", "Spring Boot", "API" , "Microservices","AWS", "PCF","Azure", "Docker", "Kubernetes");
courses.replaceAll( str -> str.toUpperCase()) //Error
List<String> modifyableCourses = new ArrayList(courses);
modifyableCourses.replaceAll(str -> str.toUpperCase())
modifyableCourses.removeIf(course -> course.length()<6)

Playing with Files using Functional Programming
	FP05Files.java
Playing with Threads using Functional Programming
	FP05Threads.java
Using Functional Programming in Java Applications
	 The best place to start using functional programming in your day-to-day life is in anywhere you would
	 want to actually process a stream of elements.
	Anywhere you have a list, a map, a set; any collection that you have, when you are trying to manipulate it,
	that's the best place for putting all that you have learned about functional programming into practice.
	Because Java is an object-oriented programming,
	you might not really change how we structure things but we can definitely start using functional programming
	wherever you are manipulating lists, wherever you are manipulating a set, or a map.
	So, as we said earlier, functional programming is a paradigm shift and it involves a different approach
	to solving the same problems that we were solving earlier.

	 

The for-each iteration
External iterators(Sequential)
	For loop
	For each/for in loop
Internal iterators(Parallel)
	Lambda for each loop
		It makes parallel processing for processor because it is not sequential like external iterators.?????
Example:
	public class CollectionIterationExamle {
		public static void main(String[] args) {
			List<Person> people = Arrays.asList(
			new Person("Charles", "Dickens", 60), 
			new Person("Lewis", "Carroll", 42),
			new Person("Thomas", "Carlyle", 51), 
			new Person("Carlatte", "Bronte", 45),
			new Person("Methew", "Arnold", 39));
			
			for(int i=0;i<people.size();i++){
				System.out.println(people.get(i));
			}
			System.out.println();
			
			for(Person p:people){
				System.out.println(p);
			}
			System.out.println();
			
			people.forEach((p)->System.out.println(p));
		}
	}
	
	
https://mkyong.com/java8/java-how-to-convert-array-to-stream/
https://www.baeldung.com/java-array-sum-average
	Arrays.stream(array).mapToInt(Integer::intValue).sum();
	Arrays.stream(array).average().orElse(Double.NaN)