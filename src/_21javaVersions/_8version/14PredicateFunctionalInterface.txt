Predicates(Since 1.8v)                  
interface Predicate<T> {                           
	public boolean test(T t);                  
 } 
 

Ex:1 Write a predicate to check whether the given integer is greater than 10 or not. 
 Ex:             
 public boolean test(Integer I) {                          
 	if (I >10) {                                
 		return true;                          
 	}                          
 	else {                               
 		return false;                          
 	}             
 } 
 or,
(Integer I) -> {                                
	if(I > 10)                                      
		return true;                               
	else                                      
		return false;                          
}
or,
I -> (I>10);  
or,
	predicate<Integer> p = I ->(I >10); 
	System.out.println (p.test(100)); //true 
	System.out.println (p.test(7)); //false 
 	System.out.println (p.test("durga")); //CTE:incompatible type: String can not be converted to integer.
 
Program: 
import Java.util.function;
class Test {   
	public static void main(String[] args) {
		predicate<Integer> p = I -> (i>10); 
		System.out.println(p.test(100)); //test is a method in Predicate function.  
		System.out.println(p.test(7));   
		System.out.println(p.test(true)); //CE 
	} 
}   

1. Write a predicate to check the length of given string is greater than 3 or not.        
	Predicate<String> p = s  -> (s.length() > 3);
	System.out.println (p.test("rvkb")); //true    
	System.out.println (p.test("rk")); //false 
 
2. write a predicate to check whether the given collection is empty or not.    
	Predicate<collection> p = c -> c.isEmpty();  
	
 	Example:
 	public static void main(String[] args){
	Predicate<Collection> p = c -> c.isEmpty();
	ArrayList l1 = new ArrayList();
	l1.add("A");
	System.out.println(p.test(l1));//false	
	ArrayList l2 = new ArrayList();
	System.out.println(p.test(l2));//true
	}
 
 
 

Predicate joining 
It’s possible to join predicates into a single predicate by using the following methods.  
		and()  
		or()  
		negate() 
	these are exactly same as logical AND ,OR 	complement operators 
Hence Predicate functional interface contain only one abstract method (test(T t))), 
but it contain multiple default method(and(), or(), negate()).
Note: Predicate is a boolean valued function and(), or(), negate() are default methods present inside Predicate interface. 
 
Example 1: 
	PredicateFunctionalInterface.java(m2())
Example 2: Program to display names starts with 'K' by using Predicate
	PredicateFunctionalInterface.java (m3())
Example 3: (Predicate example to remove null values & empty String from the given List)
	PredicateFunctionalInterface.java(m4())

Example 4: (Program for user authentication by using Predicate)
	PredicateFunctionalInterface2.java (m1())

Example 5: (Program to check whether s/w engineer is allowed into Pub or not)
	PredicateFunctionalInterface2.java (m2())
	
Example 6: (Employee management application)
	EmployeeManagementApplication.java
	ArrayList<Employee> list = new ArrayList<Employee>();
		list.populate();
	(1) Predicate<Employee> p1 = emp->emp.designation.equals("Manager");
		display(p1, list);
	(2) Predicate<Employee> p2 = emp->emp.city.equals("Bihar");
		display(p2, list);
	(3) Predicate<Employee> p3 = emp->emp.salary<100000;
		display(p3,list);
	(4) All managers from Bihar
		display(p1.and(p2), list);
	(5) To select all Employees who are managers or salary <100000
		display(p1.or(p3), list);
	(6) To select all employees who are not managers
		display(p1.negate(), list);

isEqual(T t) static method inside Predicate function		
	public static Predicate isEqual(T t)
To check whether given element is equal to the element represented by the predicate or not.
	Predicate<String> p = Predicate.isEqual("Durgasoft");
	System.out.println(p.test("Durgasoft"));//true
	System.out.println(p.test("Mallika"));//false
	
Example:
	EmployeeManagementApplication.java
		Predicate<Employees> isCEO = Predicate.isEqual(new Employees("Durga", "CEO", 30000, " Hyderabad"));
		Employees e1 = new Employees("Durga", "CEO", 30000, "Hyderabad");
		Employees e2 = new Employees("Sunny", "Manager", 20000, "Hyderabad");
		System.out.println(isCEO.test(e1));// true
		System.out.println(isCEO.test(e2));// false

Predicate.isEqual()
	Returns a predicate that tests if two arguments are equal according to equals(Object) method of Employee object.
	
Predicate functional interface contains:
 only one abstract method: test() 
 3 default methods: and(),or(),negate() 
 only one static method: isEqual() 
  

 
Q5. Which of the following is valid Predicate to check whether the given Integer is divisible by 10 or not?  
	A. Predicate<Integer> p = i -> i%10 == 0; 
	B. Predicate<Integer,Boolean> p =i->i%10==0; 
	C. Predicate<Boolean,Integer> p =i->i%10==0; 
	D. None of the above 
Answer: A 

Q6. Which of the following is valid regarding Predicate functional interface? 
	A. Predicate Functional interface present in java.util.function package 
	B. It is introduced in java 1.8 version 
	C. We can use Predicate to implement conditional checks 
	D. It is possible to join 2 predicates into a single predicate also. 
	E. All the above 
Answer: E 
 
Q7. Which of the following is valid Predicate to check whether the given user is admin or not? 
	A. Predicate<User> p=user->user.getRole().equals("Admin"); 
	B. Predicate<Boolean> p=user->user.getRole().equals("Admin"); 
	C. Predicate<User> p=(user,s="admin")->user.getRole().equals(s); 
	D. None of the above 
Answer: A 

Q8. Consider the following Predicates 
	Predicate<Integer> p1=i->i%2==0; 
	Predicate<Integer> p1=i->i>10; 
	Which of the following are invalid ? 
		A. p1.and(p2) 
		B. p1.or(p2) 
		C. p1.negate(p2) 
		D. p1.negate() 
Answer: C 
Explanation: negate() method won't take any argument 

