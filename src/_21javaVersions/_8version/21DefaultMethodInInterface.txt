Default Methods/Defender methods/virtual extension methods
Until 1.7 version inside interface we can take only:
	public static final variables
		Every variable declared inside interface is always public static final whether we are declaring or not. 
	public abstract methods
		Every method present inside interface is always public and abstract whether we are declaring or not. 
But from 1.8 version onwards in addition to these,  we can declare 
	default concrete methods also inside interface, 
	static method also


We can declare default method with the keyword “default” as follows 
	default void m1(){   System.out.println (“Default Method”);   }   
Interface default methods are by-default available to all implementation classes. 
	Based on requirement implementation class can use these default methods directly or can override. 
Ex: 
 interface Interf {    
 	default void m1() {            System.out.println("Default Method");                                }     
  }     
 class Test implements Interf {     
       public static void main(String[] args) {     
             	Test t = new Test();     
       			t.m1();     
        }
  }
  
The main advantage of default methods is without effecting implementation classes 
	we can add new functionality to the interface (backward compatibility). 
Note: We can’t override object class methods as default methods inside interface otherwise we get compile time error.
	interface Interf {  default int hashCode() {   return 10;   }   }   //CTE
	Reason: Object class methods are by-default available to every Java class 
		hence it’s not required to bring through default methods.
		
Default method are not for meaningful implementations.

stream() method is a default method added to the Collection in 1.8 version
	
Default method vs multiple inheritance 
Two interfaces can contain default method with same signature then 
	there may be a chance of ambiguity problem (diamond problem) to the implementation class. 
To overcome this problem compulsory we should override default method in the implementation class otherwise we get CTE. 
1) Eg 1:   
2) interface Left {   
3)         default void m1() {   
4)                System.out.println("Left Default Method");   
5)         }   
6) }   
8) Eg 2:   
9) interface Right {   
10)          default void m1() {   
11)                  System.out.println("Right Default Method");   
12)           }   
13) }  
14)    
15) Eg 3:   
16) class Test implements Left, Right {}   

//Duplicate default methods named m1 with the parameters () and () are inherited from the types Right and Left
public class Test implements Left, Right {}
// CTE,class Test inherits unrelated default for Left and Right

Solution: By overriding m1() method that is default method in Left and Right interfaces. 
public class Test implements Left, Right {
	@Override
	public void m1() {
		System.out.println("My Own Implementation");
		Left.super.m1();
		Right.super.m1();
	}
}


How to override default method in the implementation class? 
In the implementation class we can provide complete new implementation or we can call any interface method as follows. 
interfacename.super.m1();  

Adding too many default methods to the interface is not a very good architectural decision. 
It is should be viewed as a compromise, only to be used when required, 
	for upgrading existing interfaces without breaking backward compatibility.

Differences between interface with default methods and abstract class: 
Even though we can add concrete methods in the form of default methods to the interface, it won’t be equal to abstract class. 
 Interface with default method != abstract class 
 
Interface with Default Methods vs Abstract Class 
1) Inside interface every variable is Always public static final and there is  No chance of instance variables 
 Inside abstract class there may be a Chance of instance variables which Are required to the child class. 
2)Interface never talks about state of Object.  
  Abstract class can talk about state of Object. 
3) 
Inside interface we can’t declare Constructors.  
Inside abstract class we can declare Constructors. 
4)Inside interface we can’t declare Instance and static blocks. 
Inside abstract class we can declare Instance and static blocks. 
5)Functional interface with default  Methods Can refer lambda expression. 
Abstract class can’t refer lambda Expressions. 
6)Inside interface we can’t override Object class methods.  
Inside abstract class we can override Object class methods. 
 


Abstract class vs interface with default method
Inside it we can declare instance variables, which are required to the child class. 
   Inside it every variable is always public, static and final. We can not declare instance variable.
It can talk about state of object because it can contains instance variable. 
   It never talk about state of object.
Inside it we can declare constructors. 
   Inside it we cann't.
Inside it, we can declare instance & static block. 
    Inside it we cann't declare.
It cann't refer lambda expression even it has a only single abstract method. 
    It can refer lambda expression.
Inside it we can override Object class methods. 
    Inside it we cann't override  Object class methods.


 
default Stream stream()   present in Collection interface.
