Functional Interface
	If an interface contain only one abstract method, 
	the method is called functional method or  function descriptor or single abstract method (SAM).
Ex:
1) Runnable : It contains only run() method
2) Comparable : It contains only compareTo() method
3) Comparator: It contains only compare() method
4) ActionListener : It contains only actionPerformed()
5) Callable : It contains only call() method

Inside functional interface in addition to single Abstract method (SAM) 
we may write any number of default and static methods.And even variable also.


Java 8 introduced "@FunctionalInterface" annotation to specify that the interface is Functional Interface.
Inside Functional Interface we can take only one abstract method, 
if we take more than one abstract method then compiler raise an error message.


Functional Interface with respect to Inheritance:
If an interface extends Functional Interface and child interface doesn't contain any abstract method
	then child interface is also Functional Interface
Ex1:
 @Functional Interface
 interface A {
 	public void methodOne();
 }
 @Functional Interface
 Interface B extends A {
 }
In the child interface we can define exactly same parent interface abstract method.
Ex2:
 @Functional Interface
 interface A {
 	public void methodOne();
 }
 @Functional Interface
 interface B extends A {
 	public void methodOne();//NO CTE
 } 
 In the child interface we cann't define any new abstract methods
 otherwise child interface won't be Functional Interface and 
 if we are trying to use @Functional Interface annotation then compiler gives an error message.
EX3:
@Functional Interface {
 interface A {
	 public void methodOne();
 }
 @Functional Interface
 interface B extends A {
 	public void methodTwo();//CTE
 }
 
Ex:
@Functional Interface
interface A {
 	public void methodOne();
}
interface B extends A {
 	public void methodTwo(); //This is Normal interface so that code compiles without error
}
In the above example in both parent & child interface we can write any number of default methods
and there are no restrictions. 
Restrictions are applicable only for abstract methods.


Avoid Overloading Methods With Functional Interfaces as Parameters
Use methods with different names to avoid collisions
public interface Processor {
    String process(Callable<String> c) throws Exception;
    String process(Supplier<String> s);}
public class ProcessorImpl implements Processor {
    public String process(Callable<String> c) throws Exception {// implementation details}
    public String process(Supplier<String> s) {       // implementation details}
}
String result = processor.process(() -> "abc");//Erro, reference to process is ambiguous		
To solve this problem, we have two options. 
The first is to use methods with different names:
	String processWithCallable(Callable<String> c) throws Exception;
	String processWithSupplier(Supplier<String> s);
The second is to perform casting manually. 
	This is not preferred.
	String result = processor.process((Supplier<String>) () -> "abc");
	
	