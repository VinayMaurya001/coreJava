Function interface(Since 1.8 v)
interface ava.util.function.Function<T,R> {            
	public R apply(T t); 
} 
where T- input type, R- return type.
 


Program: Write a function to find length of given input string. 
Ex: 
 import Java.util.function.*;   
 class Test {   
            public static void main(String[] args) {  
            		//Write a function to find length of given input string.  
                    Function<String, Integer> f = (s) ->s.length();   
                    System.out.println(f.apply("Durga"));   //5
                    System.out.println(f.apply("Soft"));  //4
                    
                    //Write a function to find square of a number. 
                    Function<Integer, Integer> f1 = i ->i*i;   
                    System.out.println(f1.apply(5));  //25 
                    System.out.println(f1.apply(10));   //100
            }   
 }   

Program to remove spaces present in the given String by using Function interface: 
	Example: FunctionFunctionalInterface.java
		Function<String, String> f1 = s1 -> s1.replaceAll(" ", "");
		System.out.println(f1.apply("durga software solutions hyderabad"));//durgasoftwaresolutionshyderabad
		
Program to find Number of spaces present in the given String by using Function: 
	Example: FunctionFunctionalInterface.java (m1())
		Function<String, Integer> f = s1 -> s1.length() - s1.replaceAll(" ", "").length();
		System.out.println(f.apply("durga software solutions hyderabad"));//3
		
Program to find Student Grade by using Function: 
	Example: FunctionFunctionalInterface.java (m2())
		Function<Student, String> f = s -> {
			int marks = s.marks;
			if(marks >= 40) {
				return "A-PASS";
			} else {
				return "E-Failed";
			}
		};
		System.out.println("Student Grade:" + f.apply(s));
		
		
Program to find Students Information including Grade by using Function & predicate whose marks are >=60: 
	Example: FunctionFunctionalInterface.java (m3())
		Predicate<Student> p = s -> s.marks >= 60;
		for (Student s : list) {
			if (p.test(s)) {
				System.out.println("Student Name:" + s.name);
				System.out.println("Student Marks:" + s.marks);
				System.out.println("Student Grade:" + f.apply(s));
				System.out.println();
			}
		}
		
Program to find Total Monthly Salary of All Employees by using Function: 
	Example: TotalMonthlySalaryOfEmployee.java(m1())
		Function<ArrayList<EmployeeDetails>, Double> f = l1 -> {
			double total = 0;
			for (EmployeeDetails e : l1) {
				total = total + e.salary;
			}
			return total;
		};
		System.out.println("The total salary of this month:" + f.apply(l));

Program to perform Salary Increment for Employees by using Predicate & Function
	Example: TotalMonthlySalaryOfEmployee.java(m2()) 
		Predicate<EmployeeDetails> p = e -> e.salary < 3500;
		Function<EmployeeDetails, EmployeeDetails> f = e -> {
			e.salary = e.salary + 477;
			return e;
		};
		System.out.println("After Increment:");
		ArrayList<EmployeeDetails> l2 = new ArrayList<EmployeeDetails>();
		for (EmployeeDetails e : l) {
			if (p.test(e)) {
				l2.add(f.apply(e));
			}
		}

Function Chaining: 
We can combine multiple functions together to form more complex functions.
For this Function interface defines the following 2 default methods:  
	(1) f1.andThen(f2).apply(...): 
			First f1 will be applied and then for the result f2 will be applied. 
	(2) f1.compose(f2).apply(...):
			First f2 will be applied and then for the result f1 will be applied. 
 
Demo Program-1 for Function Chaining
	Example: FunctionChainingFunctionalInterface.java (m1())
Demo program to Demonstrate the difference between andThen() and compose(): 
	Example: FunctionChainingFunctionalInterface.java (m2())
			System.out.println(f1.andThen(f2).apply(2));
		System.out.println(f1.compose(f2).apply(2));
Demo Program for Function Chaining
	Example: FunctionChainingFunctionalInterface.java (m3())


Function interface Static Method : identity() 
	Function interface contains a static method. 
	static <T> Function<T,T> identity() 
		Returns a function that always returns its input argument
	Example: FunctionChainingFunctionalInterface.java (m4())
			Function<String, String> f1 = Function.identity();//
			String s2 = f1.apply("durga");
			System.out.println(s2);

identity()
: it is going to return a function, the speciality of this function is 
	whatever input we are going to provide, the same thing is going to provide as returned value.
or,
Returns a function that always returns its input argument.
