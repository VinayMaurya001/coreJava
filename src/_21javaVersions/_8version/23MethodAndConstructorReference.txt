Method References
https://www.baeldung.com/java-8-new-features#method-references
Method reference can be used as a shorter and more readable alternative for a lambda expression 
	which only calls an existing method. 
There are four variants of method references
1)Reference to a Static Method
	ContainingClass::methodName.
	boolean isReal = list.stream().anyMatch(u -> User.isRealUser(u));
	boolean isReal = list.stream().anyMatch(User::isRealUser);
2)Reference to an Instance Method
	containingInstance::methodName
	User user = new User();
	boolean isLegalName = list.stream().anyMatch(user::isLegalName);
3)Reference to an Instance Method of an Object of a Particular Type
	ContainingType::methodName
	long count = list.stream().filter(String::isEmpty).count();
4)Reference to a Constructor
	ClassName::new
	As constructor in Java is a special method, method reference could be applied to it too 
		with the help of new as a method name.
	Stream<User> stream = list.stream().map(User::new);



Method and Constructor references by using ::(double colon) operator 
 
In c++, :: operator is called as Scope resolution operator.
Functional Interface method can be mapped to our specified method by using :: (double colon) operator. 
	This is called method reference. 
Our specified method can be either static method or instance method.
Functional Interface method and our specified method should have same argument types, 
	except this the remaining things like  returntype, methodname, modifiers etc are not required to match. 

	
Syntax: 
if our specified method is static method  
	Classname::methodName
	 
if the method is instance method 
	Objref::methodName 
 
Functional Interface can refer lambda expression and Functional Interface can also refer method reference. 
	Hence lambda expression can be replaced with method reference.
	Hence method reference is alternative syntax to lambda expression. 
	
	MethodReference is simplified version of Lambda.
	x->System.out.println(x); is similar to  System.out::println
	
FP03MethodReferences.java
		List<String> courses = Arrays.asList("Spring", "Spring Boot", "API", "Microservices", "AWS", "PCF", "Azure", "Docker","Kubernetes");
		courses.stream()
			//.map(str -> str.toUpperCase())
			.map(String::toUpperCase)//Instance Method Reference
			.forEach(FP03MethodReferences::print);//Static Method Reference
		Supplier<String> supplier = String::new;//Contructore Reference

Ex: With Lambda Expression 
public class Test {
	public static void main(String[] args) {
		Runnable r = () -> {
			for (int i = 0; i <= 10; i++) {
				System.out.println("Child Thread");
			}
		};
		Thread t = new Thread(r);
		t.start();
		for (int i = 0; i <= 10; i++) {
			System.out.println("Main Thread");
		}
	}
}
With Method Reference 
public class Test {
	public static void m1() {
		for (int i = 0; i <= 10; i++) {
			System.out.println("Child Thread");
		}
	}
	public static void main(String[] args) {
		Runnable r = Test::m1;
		Thread t = new Thread(r);
		t.start();
		for (int i = 0; i <= 10; i++) {
			System.out.println("Main Thread");
		}
	}
}
In the above example Runnable interface run() method referring to Test class static method m1().
	
	
Method reference to Instance method:
Example:
interface Interf {
	public void m1(int i);
}
class Test {
	public void m2(int i) {
		System.out.println("From Method Reference:" + i);
	}
	public static void main(String[] args) {
		Interf f = i -> System.out.println("From Lambda Expression:" + i);
		f.m1(10);
		Test t = new Test();
		Interf i1 = t::m2;
		i1.m1(20);
	}
}
In the above example functional interface method m1() referring to Test class instance method m2(). 
The main advantage of method reference is we can use already existing code to implement functional interfaces (code re-usability). 


Constructor References 
We can use :: ( double colon )operator to refer constructors also 
Syntax: classname :: new 
Ex:            
Interf f = Sample :: new;            
functional interface f referring Sample class constructor 


Ex:
class Sample {
	private String s;
	Sample(String s) {
		this.s = s;
		System.out.println("Constructor Executed:" + s);
	}
}
interface Interf {
	public Sample get(String s);
}
class Test {
	public static void main(String[] args) {
		Interf f = s -> new Sample(s);
		f.get("From Lambda Expression");
		Interf f1 = Sample::new;
		f1.get("From Constructor Reference");
	}
}
Note: In method and constructor references compulsory the argument types must be matched. 
 
Example: 
class Sample{
	Sample(){
		System.out.println("Sample constructor execution & object creation");
	}
}
interface Interf{
	public Sample get();
}

Lembda expression
class Test{
	public static void main(String[] args){
		Interf i = ()-> {
			Sample s = new Sample();
			return s;	
		};
		Sample s1 = i.get();
	}
}

With constructor reference
class Test{
	public static void main(String[] args){
		Interf i = Sample::new;
		Sample s = i.get();
	}
}


