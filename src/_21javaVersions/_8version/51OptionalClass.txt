Optional<T>
Before Java 8 developers had to carefully validate values they referred to, 
	because of a possibility of throwing the NullPointerException (NPE). 
	All these checks demanded a pretty annoying and error-prone boilerplate code.
Java 8 Optional<T> class can help to handle situations where there is a possibility of getting the NPE. 
	It works as a container for the object of type T. 
	It can return a value of this object if this value is not a null. 
	When the value inside this container is null it allows doing some predefined actions instead of throwing NPE.
	
It can help in writing a neat code without using too many null checks. 
By using Optional, we can specify alternate values to return or alternate code to run. 
This makes the code more readable because the facts which were hidden are now visible to the developer.

Creation of the Optional<T>
	Optional<String> optional = Optional.empty();//Returns an empty Optional
	Optional<String> optional = Optional.of("value");//Returns an Optional which contains a non-null value.
	Optional<String> optional = Optional.ofNullable(getString());//Will return an Optional with a specific value or an empty Optional if the parameter is null.

This is a value-based class, i.e their instances are :
	Final and immutable (though may contain references to mutable objects).
	Considered equal solely based on equals(), not based on reference equality(==).
	Do not have accessible constructors.

Methods
static <T> Optional<T>	of(T value)
	Returns an Optional with the specified present non-null value.
static <T> Optional<T>	ofNullable(T value)
	Returns an Optional describing the specified value, if non-null, otherwise returns an empty Optional.
static <T> Optional<T>	empty()
	Returns an empty Optional instance.
	
T	get()
	If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException.
T	orElse(T other)
	Return the value if present, otherwise return other.
T	orElseGet(Supplier<? extends T> other)
	Return the value if present, otherwise invoke other and return the result of that invocation.
<X extends Throwable> T	orElseThrow(Supplier<? extends X> exceptionSupplier)
	Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.
	
Optional<T>	filter(Predicate<? super T> predicate)
	If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.
<U> Optional<U>	map(Function<? super T,? extends U> mapper)
	If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result.
<U> Optional<U>	flatMap(Function<? super T,Optional<U>> mapper)
	 If a value is present, apply the provided Optional-bearing mapping function to it, return that result, otherwise return an empty Optional.

boolean	isPresent()
	Return true if there is a value present, otherwise false.	
void	ifPresent(Consumer<? super T> consumer)
	If a value is present, invoke the specified consumer with the value, otherwise do nothing.
	
int	hashCode()
	Returns the hash code value of the present value, if any, or 0 (zero) if no value is present.
boolean	equals(Object obj)
	Indicates whether some other object is "equal to" this Optional.


Optional<T> Usage
Before Java8:
	List<String> list = getList();
	List<String> listOpt = list != null ? list : new ArrayList<>();
With Java8:
	List<String> listOpt = getList().orElseGet(() -> new ArrayList<>());
	
Before Java8:	
	User user = getUser();
	if (user != null) {
    	Address address = user.getAddress();
    	if (address != null) {
    	    String street = address.getStreet();
    	    if (street != null) {
    	        return street;
    	    }
    	}
	}
	return "not specified";
With Java8:
	Optional<User> user = Optional.ofNullable(getUser());
	String result = user
 					.map(User::getAddress)
 					.map(Address::getStreet)
				    .orElse("not specified");
	In this example we used the map() method to convert results of calling 
		the getAdress() to the Optional<Address> and getStreet() to Optional<String>. 
	If any of these methods returned null the map() method would return an empty Optional.
	
	Imagine that our getters return Optional<T>. 
	So, we should use the flatMap() method instead of the map():
	Optional<OptionalUser> optionalUser = Optional.ofNullable(getOptionalUser());
	String result = optionalUser
			  .flatMap(OptionalUser::getAddress)
			  .flatMap(OptionalAddress::getStreet)
			  .orElse("not specified");
			  
Another use case of Optional is changing NPE with another exception.
Before Java8:
	String value = null;
	String result = "";
	try {
	    result = value.toUpperCase();
	} catch (NullPointerException exception) {
	    throw new CustomException();
	}
With Java8:
	String value = null;
	Optional<String> valueOpt = Optional.ofNullable(value);
	String result = valueOpt.orElseThrow(CustomException::new).toUpperCase();
	
https://blog.joda.org/2014/11/optional-in-java-se-8.html
The goal of the class is to reduce the need to use null. 
	Instead, Optional.empty() takes the place of null. 
	One way to think of it is as a collection that holds either zero or one objects.
When you want to get the data out of the optional, there is a nice simple method, get(), 
	but this will throw an exception if the optional is empty. 
	In most cases, you will want to call one of the other methods, for example to return a default value
We should focus on using  it(Optional) as a return type (from methods that perform some useful piece of functionality) 
	Please don't use it as the field of a Java-Bean.
(As a side note, one reason not to use it in this way is that it creates an extra object for the garbage collector. 
	If used as a method return type, the extra object is typically short-lived, which causes the gc little trouble.)
	
https://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html
There are five basic points:
	Do not declare any instance variable of type Optional.
	Do not use Optional in setters or constructors.
	Use null to indicate optional data within the private scope of a class.
	Use Optional for getters that access the optional field.
	Use Optional as a return type for any other business logic methods that have an optional result.
	