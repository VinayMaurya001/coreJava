Transfer Statement

break statement
We can use break statements in the following places:
	Inside switch
	Inside loops
	Inside labeled blocks
There are the only places where we can use the break statements. If we are using anywhere else we will get CTE,
saying break outside switch() or loop.

inside switch to stop fall through
int x=0;
switch(x){
   case 0:
	SOP(0);
   case 1:
	SOP(1);
	break;
   case 2:
	SOP(2);
   default:
	SOP(“def”);
}
Output: 
0 
1

Output without break:
0 1 2 Def

Inside loops to break loop execution, based on some condition
for(int i=0;i<10;i++){
	if(i==5){
		break;
}
SOP(i);
}
Output:
0 1 2 3 4

Inside labeled blocks to break block execution based on some condition
class Test{
	PSVM(){
		int x=10;
		l1:{
			SOP(“begin”);
			if(x==10){
				Break l1;
			}
			SOP(“end”);
		}
		SOP(“Hello”);
	}
}
Output:
Begin
Hello

class Test{
	public static void main(String args[]){
		int x=10;
		if(x==10)
			break;
		System.out.println("Hello");
	}
}
Output:CTE, error: break outside switch or loop


Continue statement
There is the only one place, inside loops, to skip current iteration & continue for the next iteration, 
where we can use the continue statements. 
If we are using anywhere else we will get CTE, saying continue outside of loop.

Inside loops to skip current iteration & continue for the next iteration
for(int i=0;i<10;i++){
	if(i%2==0){
		continue;
	}
	SOP(i);
}
Output:
1 3 5 7 9

Labeled break & continue
We can use labeled break & continue to break or continue the particular loop in nested loops.
L1:
for(){
	L2:
	For(){
		For(){
			//break L1;
			//break L2;
			//break;
		}
	}
}
Output:
Break L1:break outermost loop L1
Break L2:break middle loop L2
Break :break innermost loop

class Test{
	public static void main(String args[]){
		l1:
		for(int i=0;i<3;i++){
			for(int j=0;j<3;j++){
				if(i==j){
					//line 1
					//break;
					//continue ;
				}
				System.out.println(i+"..."+j);
			}
		}
	}
}
Output:
At line 1 empty statement:
0...0
0...1
0...2
1...0
1...1
1...2
2...0
2...1
2...2

At line 1 break:
1...0
2...0
2...1

At line 1 break l1:
No output

At line 1 continue :
0...1
0...2
1...0
1...2
2...0
2...1

At line 1 continue l1:
1...0
2...0
2...1

Do-while vs continue(dangerous combination)
class Test {
	public static void main(String args[]) {
		int x = 0;
		do {
			//x = 0 3 7
			x++;
			System.out.println("a "+x);//1 4 8
			if (++x < 5) {
				//x = 2
				continue;
			}
			//x = 5 9
			x++;
			System.out.println("d "+x);//6 10
		} while (++x < 10);
	}
}
Output:
1 4 6 8 10
